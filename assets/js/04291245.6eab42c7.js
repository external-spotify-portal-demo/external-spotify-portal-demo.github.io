"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6318],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),h=o,k=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(k,c(c({ref:t},p),{},{components:n})):a.createElement(k,c({ref:t},p))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,c=new Array(r);c[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,c[1]=i;for(var l=2;l<r;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={title:"Installation & Setup",sidebar_position:2},c=void 0,i={unversionedId:"soundcheck/setup-and-installation",id:"soundcheck/setup-and-installation",title:"Installation & Setup",description:"Backend Setup",source:"@site/docs/soundcheck/setup-and-installation.mdx",sourceDirName:"soundcheck",slug:"/soundcheck/setup-and-installation",permalink:"/soundcheck/setup-and-installation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/soundcheck/setup-and-installation.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Installation & Setup",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Soundcheck",permalink:"/soundcheck/"},next:{title:"Core-concepts",permalink:"/category/core-concepts"}},s={},l=[{value:"Backend Setup",id:"backend-setup",level:2},{value:"Install the backend package",id:"install-the-backend-package",level:3},{value:"Setup Soundcheck backend",id:"setup-soundcheck-backend",level:3},{value:"Add program config",id:"add-program-config",level:3},{value:"Frontend Setup",id:"frontend-setup",level:2},{value:"Install the frontend package",id:"install-the-frontend-package",level:3},{value:"Setup the Soundcheck Entity Content Page &amp; Card",id:"setup-the-soundcheck-entity-content-page--card",level:3},{value:"Setup Soundcheck Routing Page",id:"setup-soundcheck-routing-page",level:3},{value:"Add a sidebar item",id:"add-a-sidebar-item",level:3},{value:"Install Soundcheck Group Content Page",id:"install-soundcheck-group-content-page",level:3},{value:"Check everything is working",id:"check-everything-is-working",level:3}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"backend-setup"},"Backend Setup"),(0,o.kt)("p",null,"The next steps describe how to install the Soundcheck backend plugin."),(0,o.kt)("h3",{id:"install-the-backend-package"},"Install the backend package"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Add the Soundcheck packages as dependencies to your Backstage instance")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn workspace backend add @spotify/backstage-plugin-soundcheck-backend\n")),(0,o.kt)("h3",{id:"setup-soundcheck-backend"},"Setup Soundcheck backend"),(0,o.kt)("p",null,"The Soundcheck backend handles the ingestion of check results in the database,\nand serves data to the Soundcheck UI."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new file, ",(0,o.kt)("inlineCode",{parentName:"li"},"packages/backend/src/plugins/soundcheck.ts")," with the following content:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { SoundcheckBuilder } from '@spotify/backstage-plugin-soundcheck-backend';\nimport { Router } from 'express';\nimport { PluginEnvironment } from '../types';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  return SoundcheckBuilder.create({ ...env }).build();\n}\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Set up the Soundcheck backend router in ",(0,o.kt)("inlineCode",{parentName:"p"},"/packages/backend/src/index.ts"),". You will need to import the module from the previous step, create a new plugin environment for Soundcheck and add the router to the express app."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"  // packages/backend/src/index.ts\n\n  /* ... */\n\n  import proxy from './plugins/proxy';\n  import techdocs from './plugins/techdocs';\n  import search from './plugins/search';\n+ import soundcheck from './plugins/soundcheck';\n\n  /* ... */\n\n  const techdocsEnv = useHotMemoize(module, () => createEnv('techdocs'));\n  const searchEnv = useHotMemoize(module, () => createEnv('search'));\n  const appEnv = useHotMemoize(module, () => createEnv('app'));\n+ const soundcheckEnv = useHotMemoize(module, () => createEnv('soundcheck'));\n\n  /* ... */\n\n  apiRouter.use('/techdocs', await techdocs(techdocsEnv));\n  apiRouter.use('/proxy', await proxy(proxyEnv));\n  apiRouter.use('/search', await search(searchEnv));\n+ apiRouter.use('/soundcheck', await soundcheck(soundcheckEnv));\n")))),(0,o.kt)("h3",{id:"add-program-config"},"Add program config"),(0,o.kt)("p",null,"Programs, levels and checks are driven by config. To learn more about the config, see the ",(0,o.kt)("a",{parentName:"p",href:"#defining-programs-levels-and-checks"},"Defining Programs, Levels and Checks section"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-programs.yaml")," in the root of your Backstage repository and fill in all your checks and programs.\nA simple example program with a single level and check is listed below."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Note:")," this file will be loaded at runtime along with the rest of your Backstage configuration files, so make sure it's available in deployed environments in the same way as your ",(0,o.kt)("inlineCode",{parentName:"p"},"app-config.yaml")," files."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n- id: test-certified\n  name: Test Certified\n  ownerEntityRef: group:default/example-owner\n  description: >\n    Improve quality and reliability of your software component\n    by measuring the use of testing best practices.\n  documentationURL: https://www.backstage.io\n  levels:\n    - ordinal: 1\n      checks:\n        - id: tests-run\n          name: Tests run on CI\n          description: >\n            Indicates whether your system is set up correctly to run tests and\n            report the results. You must have at least one test.\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a soundcheck field to ",(0,o.kt)("inlineCode",{parentName:"p"},"app-config.yaml")," and reference the newly created ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-programs.yaml")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# app-config.yaml\nsoundcheck:\n  programs:\n    $include: ./soundcheck-programs.yaml\n")))),(0,o.kt)("h2",{id:"frontend-setup"},"Frontend Setup"),(0,o.kt)("h3",{id:"install-the-frontend-package"},"Install the frontend package"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn workspace app add @spotify/backstage-plugin-soundcheck\n")),(0,o.kt)("h3",{id:"setup-the-soundcheck-entity-content-page--card"},"Setup the Soundcheck Entity Content Page & Card"),(0,o.kt)("p",null,"The Soundcheck Entity Page consists of a view on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/backstage/backstage/blob/master/packages/app/src/components/catalog/EntityPage.tsx"},"Catalog Entity page"),", and lists\nall the related certifications, levels, checks and check results for a\nparticular entity."),(0,o.kt)("p",null,"The code below adds the Soundcheck card to the overview tab for all component types.\nThe Soundcheck entity content component needs to be added to each relevant\npage type within your Backstage ",(0,o.kt)("inlineCode",{parentName:"p"},"EntityPage"),". The snippets below insert the\ncard/tabs at the end of their respective containers, but it's fine to reorder\nthem as you wish. When reordering the card in particular, consider whether the\n",(0,o.kt)("a",{parentName:"p",href:"https://v4.mui.com/components/grid/#fluid-grids"},"fluid layout")," of the grid\nshould be adjusted to ensure the cards fill each row."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// packages/app/src/components/catalog/EntityPage.tsx\n\nimport {\n  EntitySoundcheckContent,\n  EntitySoundcheckCard,\n} from \'@spotify/backstage-plugin-soundcheck\';\n\n// ...\n\nconst overviewContent = (\n  <Grid container spacing={3} alignItems="stretch">\n    {/* existing cards... */}\n\n    <Grid item md={6} xs={12}>\n      <EntitySoundcheckCard />\n    </Grid>\n  </Grid>\n);\n\n// ...\n\n// Repeat this for all component entity pages which use the `overviewContent`\nconst serviceEntityPage = (\n  <EntityLayout>\n    {/* existing tabs... */}\n\n    <EntityLayout.Route path="/soundcheck" title="Soundcheck">\n      <EntitySoundcheckContent />\n    </EntityLayout.Route>\n  </EntityLayout>\n);\n')),(0,o.kt)("h3",{id:"setup-soundcheck-routing-page"},"Setup Soundcheck Routing Page"),(0,o.kt)("p",null,"Add a new Route element with the path ",(0,o.kt)("inlineCode",{parentName:"p"},"/soundcheck")," and element of ",(0,o.kt)("inlineCode",{parentName:"p"},"<SoundcheckRoutingPage />"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"<SoundcheckRoutingPage />")," supports the following props:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"{\n  title: string; // OPTIONAL - Defaults to 'Soundcheck' when excluded\n}\n")),(0,o.kt)("p",null,"The route should look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// packages/app/src/App.tsx\nimport { SoundcheckRoutingPage } from \'@spotify/backstage-plugin-soundcheck\';\n\nconst routes = (\n  <FlatRoutes>\n    {/* existing routes... */}\n\n    <Route\n      path="/soundcheck"\n      element={<SoundcheckRoutingPage title="My Optional Title" />}\n    />\n  </FlatRoutes>\n);\n')),(0,o.kt)("h3",{id:"add-a-sidebar-item"},"Add a sidebar item"),(0,o.kt)("p",null,"Add a sidebar menu item that routes to the path setup in the previous step"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// packages/app/src/components/Root.tsx\nimport DoneAllIcon from \'@material-ui/icons/DoneAll\';\n\nexport const Root = ({ children }: PropsWithChildren<{}>) => (\n  <SidebarPage>\n    <Sidebar>\n      <SidebarLogo />\n      {/* existing sidebar items... */}\n\n      <SidebarScrollWrapper>\n        {/* existing sidebar items... */}\n\n        <SidebarItem icon={DoneAllIcon} to="soundcheck" text="Soundcheck" />\n      </SidebarScrollWrapper>\n    </Sidebar>\n  </SidebarPage>\n);\n')),(0,o.kt)("h3",{id:"install-soundcheck-group-content-page"},"Install Soundcheck Group Content Page"),(0,o.kt)("p",null,"The Soundcheck Group Content Page is a Soundcheck Overview Page that can be pinned to a selected group entity.\nIt can only be added to a group page type within your Backstage ",(0,o.kt)("inlineCode",{parentName:"p"},"EntityPage"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// packages/app/src/components/catalog/EntityPage.tsx\nimport { GroupSoundcheckContent } from \'@spotify/backstage-plugin-soundcheck\';\n\nconst groupPage = (\n  <EntityLayout>\n    {/* existing tabs... */}\n\n    <EntityLayout.Route path="/soundcheck" title="Soundcheck">\n      <GroupSoundcheckContent />\n    </EntityLayout.Route>\n  </EntityLayout>\n);\n')),(0,o.kt)("h3",{id:"check-everything-is-working"},"Check everything is working"),(0,o.kt)("p",null,"If you have followed all steps up to this point, Soundcheck is set up and\nrunning. The backend successfully starts up if the program config is valid, and\nwhen you navigate to a catalog page for one of the entity types you configured\nabove, you'll see the Soundcheck tab containing the applicable programs for the\ncurrent entity. If you visit ",(0,o.kt)("inlineCode",{parentName:"p"},"/soundcheck"),' or click the "Soundcheck" entry on the sidebar, you should see the overview page.'))}d.isMDXComponent=!0}}]);