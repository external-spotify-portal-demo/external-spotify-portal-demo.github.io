"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[336],{3905:(e,t,i)=>{i.d(t,{Zo:()=>h,kt:()=>f});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function c(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},h=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),u=l(i),p=r,f=u["".concat(s,".").concat(p)]||u[p]||d[p]||a;return i?n.createElement(f,o(o({ref:t},h),{},{components:i})):n.createElement(f,o({ref:t},h))}));function f(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=p;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<a;l++)o[l]=i[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},5140:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var n=i(7462),r=(i(7294),i(3905));const a={title:"History",sidebar_position:4},o=void 0,c={unversionedId:"soundcheck/core-concepts/history",id:"soundcheck/core-concepts/history",title:"History",description:"Check Result History",source:"@site/docs/soundcheck/core-concepts/history.mdx",sourceDirName:"soundcheck/core-concepts",slug:"/soundcheck/core-concepts/history",permalink:"/soundcheck/core-concepts/history",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/soundcheck/core-concepts/history.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"History",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Fact collectors",permalink:"/soundcheck/core-concepts/fact-collectors"},next:{title:"Third Party Integrations",permalink:"/category/third-party-integrations"}},s={},l=[{value:"Check Result History",id:"check-result-history",level:2},{value:"Enabling Check Result History",id:"enabling-check-result-history",level:3},{value:"Reading Check Result History",id:"reading-check-result-history",level:3},{value:"Certification History",id:"certification-history",level:2},{value:"Enabling Certification History",id:"enabling-certification-history",level:3},{value:"Reading Certification History",id:"reading-certification-history",level:3},{value:"Certification History Schema",id:"certification-history-schema",level:3}],h={toc:l},u="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,n.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"check-result-history"},"Check Result History"),(0,r.kt)("p",null,"By default, Soundcheck retains only the latest result for each check, so that\nthe size of the database is a function of the number of entities and the number\nof of checks, rather than the number of check ",(0,r.kt)("em",{parentName:"p"},"results"),". However, it's possible\nto enable tracking of check result history in order to track the change in check\nresults over time."),(0,r.kt)("p",null,"Soundcheck does not currently provide an API or UI for interacting with check\nresult history. However, it's possible for other systems to integrate with check\nresult history by reading from the Soundcheck database directly."),(0,r.kt)("h3",{id:"enabling-check-result-history"},"Enabling Check Result History"),(0,r.kt)("p",null,"To enable check result history, set ",(0,r.kt)("inlineCode",{parentName:"p"},"soundcheck.results.history.enable")," to true\nin config:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# app-config.yaml\nsoundcheck:\n  results:\n    history:\n      enable: true\n")),(0,r.kt)("h3",{id:"reading-check-result-history"},"Reading Check Result History"),(0,r.kt)("p",null,"Check result history is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"check_result_history")," table in the\nSoundcheck database. Unless ",(0,r.kt)("a",{parentName:"p",href:"https://backstage.io/docs/tutorials/configuring-plugin-databases#connection-configuration-per-plugin"},"overridden in Backstage\nconfiguration"),",\nthe Soundcheck database will be part of the main Backstage database, and named\n",(0,r.kt)("inlineCode",{parentName:"p"},"backstage_plugin_soundcheck"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM check_result_history\nWHERE entity_ref = 'component:default/example-component';\n")),(0,r.kt)("p",null,"The table contains the same fields as the (object accepted by the check result\nsubmission endpoint)","[#check-result-schema]",", along with a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"check_result_history_id")," field and a\n",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," corresponding to the time the result was submitted."),(0,r.kt)("h2",{id:"certification-history"},"Certification History"),(0,r.kt)("p",null,"By default, Soundcheck certifies entities against their applicable tracks on demand,\nso that certifications (the highest level of the track that has all checks passing) are\nnever stored in the database. However, it's possible to enable tracking of certification\nhistory in order to track the change in the highest certified levels for every entity and\ntheir applicable tracks over time."),(0,r.kt)("p",null,"Soundcheck does not currently provide an API for interacting with certification history.\nHowever, the certification history data is used by Soundcheck Tech Health page\nto visualize snapshots and trends of the highest certified levels for every entity and\ntheir applicable tracks. It's also possible for other systems to integrate with certification\nhistory by reading from the Soundcheck database directly."),(0,r.kt)("h3",{id:"enabling-certification-history"},"Enabling Certification History"),(0,r.kt)("p",null,"To enable check result history, set ",(0,r.kt)("inlineCode",{parentName:"p"},"soundcheck.certifications.history.enable")," to true\nin config:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# app-config.yaml\nsoundcheck:\n  certifications:\n    history:\n      enable: true\n")),(0,r.kt)("h3",{id:"reading-certification-history"},"Reading Certification History"),(0,r.kt)("p",null,"Certification history is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"certification_history")," table in the\nSoundcheck database. Unless ",(0,r.kt)("a",{parentName:"p",href:"https://backstage.io/docs/tutorials/configuring-plugin-databases#connection-configuration-per-plugin"},"overridden in Backstage\nconfiguration"),",\nthe Soundcheck database will be part of the main Backstage database, and named\n",(0,r.kt)("inlineCode",{parentName:"p"},"backstage_plugin_soundcheck"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM certification_history\nWHERE entity_ref = 'component:default/example-component';\n")),(0,r.kt)("h3",{id:"certification-history-schema"},"Certification History Schema"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"certification_id")," - Unique identifier for the certification (primary key)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"entity_ref")," - Entity reference that the certification relates to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"owner_entity_ref")," ","[optional]"," - Software catalog entity that owns the entity this certification is for."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"track_id")," - Unique identifier for the track this certification is for."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scope")," - The scope of check results this certification was created for."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"highest_level")," ","[optional]"," - Rank of the highest certified level. Null if no level is certified."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"certification_date")," - The date of the certification."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"last_updated")," - The timestamp indicating the date and time when the certification was last updated.")))}d.isMDXComponent=!0}}]);