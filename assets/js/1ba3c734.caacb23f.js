"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[124],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,u=d["".concat(c,".").concat(m)]||d[m]||h[m]||i;return n?a.createElement(u,l(l({ref:t},p),{},{components:n})):a.createElement(u,l({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=m;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[d]="string"==typeof e?e:o,l[1]=r;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2539:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:1,title:"Soundcheck end-to-end"},l=void 0,r={unversionedId:"soundcheck/tutorials/end-to-end",id:"soundcheck/tutorials/end-to-end",title:"Soundcheck end-to-end",description:"This is meant to be a guide for getting Soundcheck up and running.  Each section of the Tutorial walks through a commit done to install and use Soundcheck.  The application can be run from any commit in this repo.",source:"@site/docs/soundcheck/tutorials/end-to-end.mdx",sourceDirName:"soundcheck/tutorials",slug:"/soundcheck/tutorials/end-to-end",permalink:"/soundcheck/tutorials/end-to-end",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/soundcheck/tutorials/end-to-end.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Soundcheck end-to-end"},sidebar:"tutorialSidebar",previous:{title:"Tutorials",permalink:"/category/tutorials"},next:{title:"RBAC",permalink:"/rbac/"}},c={},s=[{value:"Contents",id:"contents",level:2},{value:"Initial Backstage Setup",id:"initial-backstage-setup",level:2},{value:"Commit #1: Create Repo",id:"commit-1-create-repo",level:3},{value:"Commit #2: Configuration",id:"commit-2-configuration",level:3},{value:"SoundCheck Install",id:"soundcheck-install",level:2},{value:"Commit #3: Soundcheck Installation and Setup",id:"commit-3-soundcheck-installation-and-setup",level:3},{value:"Soundcheck Configuration",id:"soundcheck-configuration",level:2},{value:"Commit #4: Add GitHub Collector and Basic Program",id:"commit-4-add-github-collector-and-basic-program",level:3},{value:"Commit #5: Add SCM Fact Collector",id:"commit-5-add-scm-fact-collector",level:3},{value:"Commit #6: Add Custom Fact Collector",id:"commit-6-add-custom-fact-collector",level:3},{value:"Commit #7: Add Branch Protection Checks",id:"commit-7-add-branch-protection-checks",level:3},{value:"Commit #8: Add POST Only Check",id:"commit-8-add-post-only-check",level:3},{value:"Commit #9: Add Catalog Fact Collector",id:"commit-9-add-catalog-fact-collector",level:3},{value:"Commit #10: Add Soundcheck Collector",id:"commit-10-add-soundcheck-collector",level:3}],p={toc:s},d="wrapper";function h(e){let{components:t,...i}=e;return(0,o.kt)(d,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is meant to be a guide for getting Soundcheck up and running.  Each section of the Tutorial walks through a commit done to install and use Soundcheck.  The application can be run from any commit in this repo."),(0,o.kt)("p",null,"Skip to any section below for a commit highlighting that specific intent.  Each section has a link the commit that accomplished the intent."),(0,o.kt)("h2",{id:"contents"},"Contents"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-1-create-repo"},"Commit #1: Create Repo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-2-configuration"},"Commit #2: Configuration")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-3-soundcheck-installation-and-setup"},"Commit #3: Soundcheck Installation and Setup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-4-add-github-collector-and-basic-program"},"Commit #4: Add GitHub Collector and Basic Program")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-5-add-scm-fact-collector"},"Commit #5: Add SCM Fact Collector")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-6-add-custom-fact-collector"},"Commit #6: Add Custom Fact Collector")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-7-add-branch-protection-checks"},"Commit #7: Add Branch Protection Checks")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-8-add-post-only-check"},"Commit #8: Add POST Only Check")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-9-add-catalog-fact-collector"},"Commit #9: Add Catalog Fact Collector")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#commit-10-add-soundcheck-collector"},"Commit #10: Add Soundcheck Fact Collector"))),(0,o.kt)("p",null,"To start the app, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"yarn install\nyarn dev\n")),(0,o.kt)("h2",{id:"initial-backstage-setup"},"Initial Backstage Setup"),(0,o.kt)("h3",{id:"commit-1-create-repo"},"Commit #1: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/00a9be8c1694e2cc911b8e94aae9ba342dfb8c6e"},"Create Repo")),(0,o.kt)("p",null,"This repo was created by following the ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.spotify.com/learn/standing-up-backstage/standing-up-backstage/2-install-app/"},"Backstage installation")," instructions"),(0,o.kt)("h3",{id:"commit-2-configuration"},"Commit #2: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/64f470394c5ec8022af05d47247db0723e69bbd4"},"Configuration")),(0,o.kt)("p",null,"This commit consists of following instructions from ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.spotify.com/learn/standing-up-backstage/configuring-backstage/5-config-2/"},"Setting up PostgreSQL")," to ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.spotify.com/learn/standing-up-backstage/configuring-backstage/7-authentication/"},"Setting up Authentication"),"."),(0,o.kt)("p",null,"To run the application, an app-config.local.yaml will need to be added.  It will something look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"backend:\n  database:\n    connection:\n      host: localhost\n      # Default postgresql port is 5432.  50576 is arbitrary, 5432 is in use by another application.\n      port: 50576\n      user: postgres\n      # Replace the password below with your postgresql password:\n      password: <secret>\nauth:\n  # see https://backstage.io/docs/auth/ to learn about auth providers\n  environment: development\n  providers:\n    github:\n      development:\n        clientId: <client_id>\n        clientSecret: <secret_key>\nintegrations:\n  github:\n    - host: github.com\n      token: <github_token>\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"<client_id>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<secret_key>")," are created ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.spotify.com/learn/standing-up-backstage/configuring-backstage/7-authentication/"},"here"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"<github_token>")," is created ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.spotify.com/learn/standing-up-backstage/putting-backstage-into-action/8-integration/"},"here")))),(0,o.kt)("h2",{id:"soundcheck-install"},"SoundCheck Install"),(0,o.kt)("p",null,"Add the Spotify license key to you app-config-local.yaml"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"spotify:\n  licenseKey: <license_key>\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<license_key>")," can be found by going to ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.spotify.com/account/"},"Backstage Account Overview")),(0,o.kt)("h3",{id:"commit-3-soundcheck-installation-and-setup"},"Commit #3: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/bbfa3ffd0990197b3aa7355016a40c2045340fee"},"Soundcheck Installation and Setup")),(0,o.kt)("p",null,"This commit consists of following the Soundcheck installation instructions:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend#1-install-the-plugins"},"Backend Installation")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck"},"Frontend Installation"))),(0,o.kt)("p",null,"At this point Soundcheck is installed, but it is not doing anything."),(0,o.kt)("p",null,"The menu bar on the left should be visible:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Sidebar Image",src:n(9334).Z,width:"224",height:"464"})),(0,o.kt)("p",null,"As well as the tab menu when viewing an entity:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Tabe Menu Image",src:n(8078).Z,width:"789",height:"183"})),(0,o.kt)("p",null,"Changes made to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ThayerAltman/example-backstage/commit/bbfa3ffd0990197b3aa7355016a40c2045340fee#diff-3ccad462b80d2ba6c9abe6d5f1ba474dad9ae8b919056a51aadf383e49bafdc1"},"app-config.yaml")," include adding:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"soundcheck:\n  programs:\n    $include: ./soundcheck/soundcheck-empty-program.yaml\n")),(0,o.kt)("p",null,"Here an empty program was added to Soundcheck.  A valid program is needed for the plugin to start."),(0,o.kt)("p",null,"Additionally ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ThayerAltman/example-backstage/commit/bbfa3ffd0990197b3aa7355016a40c2045340fee#diff-ec52f22d476ccc33271d11c4f08a68369614378aa0cb9aa5aba2f08943cd68df"},"soundcheck-empty-program.yaml")," is the empty Soundcheck program referenced in the app-config.yaml:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n- id: empty-program\n  name: Empty Program\n  ownerEntityRef: group:default/example-owner\n  description: >\n    Empty\n  documentationURL: \n  levels:\n    - ordinal: 1\n      checks:\n        - id: empty_check\n          name: Empty Check\n          description: >\n            Empty description\n")),(0,o.kt)("h2",{id:"soundcheck-configuration"},"Soundcheck Configuration"),(0,o.kt)("p",null,"In order to see Soundcheck in action, an entity will need to be added to the catalog.  Using the register existing component button, register a simple ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ThayerAltman/node-app/blob/master/catalog-info.yaml"},"entity")),(0,o.kt)("h3",{id:"commit-4-add-github-collector-and-basic-program"},"Commit #4: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/066bad9b34df78b293c90747d7544bac0b888123"},"Add GitHub Collector and Basic Program")),(0,o.kt)("p",null,"More info can be found ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend-module-github"},"here"),"."),(0,o.kt)("p",null,"This commit adds a simple program that involves using the GitHub fact collector to verify the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The repo has less than ten open issues"),(0,o.kt)("li",{parentName:"ol"},"The repo's default branch is named main"),(0,o.kt)("li",{parentName:"ol"},"The repo is private")),(0,o.kt)("p",null,"This is accomplished by defining the program in ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-programs.yaml"),".  This file represents the entire tech health initiative.  In this case there is only one level (Basic Setup), in later steps there will be more levels added."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n- id: basic-setup\n  name: Basic Setup\n  ownerEntityRef: group:default/example-owner\n  description: >\n    Improve quality and reliability of your software component\n    by measuring the use of testing best practices.\n  documentationURL: https://www.backstage.io\n  levels:\n    - ordinal: 1\n      checks:\n        - id: has_less_than_ten_open_issues\n          name: Less than 10 open issues\n          description: >\n            The service should have less than 10 open issues\n        - id: is_repo_private\n          name: The GitHub repo is private\n          description: >\n            All repos need to be private.\n        - id: default_branch_is_main\n          name: The default branch is main\n          description: >\n            Default branches should be named main\n")),(0,o.kt)("p",null,"Each of the above program checks correspond to a check in the ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-checks.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n- id: has_less_than_ten_open_issues\n  rule:\n    factRef: github:default/repo_details\n    path: $.open_issues\n    operator: lessThan\n    value: 10\n  passedMessage: |\n    Less than 10 open issues\n  failedMessage: |\n    Ten or more open issue(s)\n- id: is_repo_private\n  rule:\n    factRef: github:default/repo_details\n    path: $.private\n    operator: equal\n    value: true\n  passedMessage: |\n    Repo is private\n  failedMessage: |\n    Repo is not private, change repo to private\n- id: default_branch_is_main\n  rule:\n    factRef: github:default/repo_details\n    path: $.default_branch\n    operator: equal\n    value: main\n  passedMessage: |\n    Default branch is main\n  failedMessage: |\n    Change default branch to main\n")),(0,o.kt)("p",null,"Note: The names of the checks in ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-checks.yaml")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-programs.yaml")," must match.  The above file defines what each check is actually checking for.  As an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: has_less_than_ten_open_issues\n  rule:\n    factRef: github:default/repo_details\n    path: $.open_issues\n    operator: lessThan\n    value: 10\n  passedMessage: |\n    Less than 10 open issues\n  failedMessage: |\n    Ten or more open issues\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"has_less_than_ten_open_issues")," will verify that the given repository has less than ten open issues.  Under the hood, Soundcheck is calling the GitHub API ",(0,o.kt)("a",{parentName:"p",href:"https://api.github.com/repos/%7Borg%7D/%7Brepo%7D"},"https://api.github.com/repos/{org}/{repo}")," using the provided GitHub token.  An example ",(0,o.kt)("em",{parentName:"p"},"truncated")," response is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "id": 616657405,\n    "node_id": "R_kgDOJMFx_Q",\n    "name": "node-app",\n    "full_name": "ThayerAltman/node-app",\n    "private": true,\n    "owner": {\n        "login": "ThayerAltman",\n        "id": 110566684\n    },\n    "open_issues_count": 2,\n    "license": null,\n    "allow_forking": true,\n    "is_template": false,\n    "web_commit_signoff_required": false,\n    "topics": [],\n    "visibility": "private",\n    "forks": 0,\n    "open_issues": 2,\n    "watchers": 0,\n    "default_branch": "master",\n    "temp_clone_token": "A2LR2HDARSRGLWJVJDSFZPTEJGH2S",\n    "allow_squash_merge": true,\n    "allow_merge_commit": true,\n    "allow_rebase_merge": true,\n    "allow_auto_merge": false,\n    "delete_branch_on_merge": false,\n    "allow_update_branch": false,\n    "use_squash_pr_title_as_default": false,\n    "squash_merge_commit_message": "COMMIT_MESSAGES",\n    "squash_merge_commit_title": "COMMIT_OR_PR_TITLE",\n    "merge_commit_message": "PR_TITLE",\n    "merge_commit_title": "MERGE_MESSAGE",\n    "network_count": 0,\n    "subscribers_count": 1\n}\n')),(0,o.kt)("p",null,"The GitHub Fact Collector will look at the value of ",(0,o.kt)("inlineCode",{parentName:"p"},'"open_issues"')," and determine if the value is less than 10."),(0,o.kt)("p",null,"The final piece of the Soundcheck program is the ",(0,o.kt)("inlineCode",{parentName:"p"},"github-facts-collectors.yaml"),".  This file determines what facts will be collected about the eligible entities."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nfrequency:\n  cron: '* * * * *'\nfilter:\n  kind: 'Component'\ncache:\n  duration:\n    hours: 2\ncollects:\n  - factName: repo_details\n    type: RepositoryDetails\n    cache: true\n")),(0,o.kt)("p",null,"In this case the ",(0,o.kt)("inlineCode",{parentName:"p"},"RepositoryDetails")," fact will be collected, and the name of the fact will be ",(0,o.kt)("inlineCode",{parentName:"p"},"repo_details"),".  The cron value is ",(0,o.kt)("inlineCode",{parentName:"p"},"'* * * * *'"),", which indicates the fact will be collected every minute.  Every minute is ",(0,o.kt)("strong",{parentName:"p"},"far")," to frequent, but works great in demos \ud83d\ude05.  Finally the cache duration is set to 2 hours:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"cache:\n  duration:\n    hours: 2\n")),(0,o.kt)("p",null,"This means the fact itself will be cached for 2 hours.  As a result, if any check is executed while the fact is still in the cache, it will read that value instead of collecting the fact from its source."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"app-config.yaml")," is where all of the above files are configured to be part of Soundcheck:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"soundcheck:\n  programs:\n    $include: ./soundcheck/soundcheck-programs.yaml\n  checks:\n    $include: ./soundcheck/soundcheck-checks.yaml\n  collectors:\n    github:\n      $include: ./soundcheck/github-facts-collectors.yaml\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"programs"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"checks"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"collectors")," are referenced using the ",(0,o.kt)("inlineCode",{parentName:"p"},"$include")," operator.  The configuration for these sections can be defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"app-config.yaml")," in their appropriate section or in another file and included as is done here.  Example below shows a check defined in the app-config.yaml:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"soundcheck:\n  checks:\n    - id: custom_fact_check\n      rule:\n        factRef: custom:default/github_custom_fact\n        path: $.testPassed\n        operator: equal\n        value: true\n")),(0,o.kt)("p",null,"Now if backstage is started and the Soundcheck tab is opened, it should look like:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"First Checks Image",src:n(4953).Z,width:"1150",height:"586"})),(0,o.kt)("h3",{id:"commit-5-add-scm-fact-collector"},"Commit #5: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/7ed1b9da2de46f42bc102a72b7856a9af32f4261"},"Add SCM Fact Collector")),(0,o.kt)("p",null,"More info can be found ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend-module-scm"},"here"),"."),(0,o.kt)("p",null,"This commit adds another level to the basic program and adds a whole new program.  The checks added will verify that:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The repo has a README.md"),(0,o.kt)("li",{parentName:"ol"},"The repo has a catalog-info.yaml"),(0,o.kt)("li",{parentName:"ol"},"If the repo is a python service, the github actions are running pytest (using regex)")),(0,o.kt)("p",null,"Three checks have been added to ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-checks.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: has_readme_check # The name of the check\n  rule: # How to evaluate this check\n    factRef: scm:default/readme_and_catalog_info_files_exist_fact # The fact data to reference\n    path: $.readme_exists # The path to the field to analyze\n    operator: equal # Indicates the operation to apply\n    value: true # The desired value of the field indicated in the path, above.\n- id: has_catalog_info_file_check\n  rule:\n    factRef: scm:default/readme_and_catalog_info_files_exist_fact\n    path: $.catalog_info_exists\n    operator: equal\n    value: true\n- id: python_service_runs_tests\n  rule:\n    factRef: scm:default/python_service_runs_tests\n    path: $.matches\n    operator: equal\n    value: true\n")),(0,o.kt)("p",null,"Two of the checks ",(0,o.kt)("inlineCode",{parentName:"p"},"has_readme_check")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"has_catalog_info_file_check")," reference the same fact ",(0,o.kt)("inlineCode",{parentName:"p"},"readme_and_catalog_info_files_exist_fact"),"\nThe facts are collected as per the configuration in ",(0,o.kt)("inlineCode",{parentName:"p"},"scm-facts-collectors.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"frequency:\n  cron: '* * * * *' # Defines a schedule for when the facts defined in this file should be collected\n  # This is optional and if omitted, facts will only be collected on demand.\nfilter: # A filter specifying which entities to collect the specified facts for\n  kind: 'Component'\ncache: # Defines if the collected facts should be cached, and if so for how long\n  duration:\n    hours: 2\ncollects: # An array of fact extractor configuration describing how to collect SCM facts.\n  - factName:\n      readme_and_catalog_info_files_exist_fact # This gives this fact an identifier which is\n      # used to refer to the fact in other\n      # configuration files.\n    type: exists # This identifies the type of fact to collect.\n    data: # This defines the data element which will be returned in the\n      # fact object when the fact is collected.\n      - name: readme_exists # Label for the data element.\n        path: /README.md # The file for which existence will be determined.\n      - name: catalog_info_exists # Label for the data element.\n        path: /catalog-info.yaml\n  - factName:\n      python_service_runs_tests # This gives this fact an identifier which is\n      # used to refer to the fact in other\n      # configuration files.\n    type: regex # This identifies the type of fact to collect.\n    regex:\n      \\s*run:\\s*\\|*\\s*pytest.*$\n    path: /.github/workflows/build.yaml\n")),(0,o.kt)("p",null,"The first fact ",(0,o.kt)("inlineCode",{parentName:"p"},"readme_and_catalog_info_files_exist_fact")," will collect two pieces of information:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"readme_exists"),(0,o.kt)("li",{parentName:"ol"},"catalog_info_exists")),(0,o.kt)("p",null,"Looking at the database, this fact will look like:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Soundcheck Entry Image",src:n(7031).Z,width:"2505",height:"82"})),(0,o.kt)("p",null,"Specifically the fact collected:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "readme_exists": true,\n  "catalog_info_exists": true\n}\n')),(0,o.kt)("p",null,"Looking back at ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-checks.yaml"),"'s check:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: has_catalog_info_file_check\n  rule:\n    factRef: scm:default/readme_and_catalog_info_files_exist_fact\n    path: $.catalog_info_exists\n    operator: equal\n    value: true\n")),(0,o.kt)("p",null,"The above path contains ",(0,o.kt)("inlineCode",{parentName:"p"},"$.catalog_info_exists"),", which will map into the json object collected."),(0,o.kt)("p",null,"Additionally there is the ",(0,o.kt)("inlineCode",{parentName:"p"},"python_service_runs_tests")," check:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  - factName:\n      python_service_runs_tests # This gives this fact an identifier which is\n      # used to refer to the fact in other\n      # configuration files.\n    type: regex # This identifies the type of fact to collect.\n    regex:\n      \\s*run:\\s*\\|*\\s*pytest.*$\n    path: /.github/workflows/build.yaml\n")),(0,o.kt)("p",null,"This will look at the ",(0,o.kt)("inlineCode",{parentName:"p"},"/.github/workflows/build.yaml")," file and determine if the regular expression ",(0,o.kt)("inlineCode",{parentName:"p"},"\\s*run:\\s*\\|*\\s*pytest.*$")," has a match.  The goal of this regular expression is to determine if pytest is being run as part of a GitHub actions workflow."),(0,o.kt)("p",null,"Looking at the additions to the ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-programs.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"    - ordinal: 2\n      checks:\n        - id: has_readme_check\n          name: Readme exists\n          description: >\n            Indicates whether there is a readme in the repo.\n        - id: has_catalog_info_file_check\n          name: Catalog-info exists\n          description: >\n            Indicates the repo contains a catalog-info.yaml.\n- id: test-certified\n  name: Test Certified\n  ownerEntityRef: group:default/example-owner\n  description: >\n    Improve quality and reliability of your software component\n    by measuring the use of testing best practices.\n  documentationURL: https://www.backstage.io\n  levels:\n    - ordinal: 1\n      checks:\n        - id: python_service_runs_tests\n          name: The python service runs pytest\n          description: >\n            This service is currently running pytest as part of its GitHub actions workflow as defined in the build.yaml\n          filter:\n            catalog:\n              metadata.tags: python\n")),(0,o.kt)("p",null,"There is a filter added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"python_service_runs_tests"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"filter:\n  catalog:\n    metadata.tags: python\n")),(0,o.kt)("p",null,"This will make this check only visible on entities labeled with ",(0,o.kt)("inlineCode",{parentName:"p"},"python")),(0,o.kt)("p",null,"In order to see this check in action, a python entity will need to be added to the catalog.  Using the register existing component button, register this ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ThayerAltman/simple-python-service/blob/master/catalog-info.yaml"},"entity")),(0,o.kt)("p",null,"After adding the entry, the Soundcheck tab for the entry would look like:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Test Certified Image",src:n(7793).Z,width:"1502",height:"367"})),(0,o.kt)("h3",{id:"commit-6-add-custom-fact-collector"},"Commit #6: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/79e8321466440f1769ba948445b9c93ff3908a2a"},"Add Custom Fact Collector")),(0,o.kt)("p",null,"This commit adds a custom fact collector.  In this case it will collect the number of branches that have been created for this repo.  It will do that by calling the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/graphql"},"GitHub GraphQL API")," via ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/octokit/graphql.js/#typescript"},"Oktokit"),".  Any web service call can be done here, this example will highlight how to use Backstage's internal credentials.  The checks being added are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The repo has less than 3 branches"),(0,o.kt)("li",{parentName:"ol"},"The repo has less than 4 branches")),(0,o.kt)("p",null,"The files added are similar to what was added in previous commits:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"New program in ",(0,o.kt)("inlineCode",{parentName:"li"},"soundcheck-program.yaml")),(0,o.kt)("li",{parentName:"ol"},"New checks in ",(0,o.kt)("inlineCode",{parentName:"li"},"soundcheck-checks.yaml")),(0,o.kt)("li",{parentName:"ol"},"New collector in ",(0,o.kt)("inlineCode",{parentName:"li"},"branch-facts-collector.yaml"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"However")," in this case there is also code added to facilitate the checks."),(0,o.kt)("p",null,"First let's look at the checks ",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck-checks.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: less_than_4_branches\n  rule:\n    factRef: branch:default/branch_count\n    path: $.totalCount\n    operator: lessThan\n    value: 4\n  passedMessage: |\n    Less than 4 branches\n  failedMessage: |\n    4 or more branches\n- id: less_than_3_branches\n  rule:\n    factRef: branch:default/branch_count\n    path: $.totalCount\n    operator: lessThan\n    value: 3\n  passedMessage: |\n    Less than 3 branches\n  failedMessage: |\n    3 or more branches\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"factRef")," with value ",(0,o.kt)("inlineCode",{parentName:"p"},"branch:default/branch_count")," corresponds to the collector ",(0,o.kt)("inlineCode",{parentName:"p"},"branch-facts-collector.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nfrequency:\n  minutes: 1\ncache: # Defines if the collected facts should be cached, and if so for how long\n  duration:\n    hours: 2\ncollects:\n  factName: branch_count\n  type: branchDescriptor \n")),(0,o.kt)("p",null,"This value also corresponds to some identifiers in the code."),(0,o.kt)("p",null,"Looking at a portion of ",(0,o.kt)("inlineCode",{parentName:"p"},"branchcount.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'  async collect(\n    entities: Entity[],\n    _params?: { factRefs?: FactRef[]; refresh?: FactRef[] },\n  ): Promise<Fact[]> {\n    try {\n      const factRef: FactRef = stringifyFactRef({\n        name: \'branch_count\',\n        scope: \'default\',\n        source: \'branch\',\n      });\n      return Promise.all(\n        entities\n          .filter(entity => isScmEntity(entity))\n          .map(async entity => {\n            const entityRef = stringifyEntityRef(entity);\n            const entityScmUrl = getEntityScmUrl(entity);\n            const gitUrl = parseGitUrl(entityScmUrl);\n\n            const { token } = await this.#credentialsProvider.getCredentials({ url: entityScmUrl });\n            const response = await graphql(\n              `\n              query numBranches($owner: String!, $repo: String!) {\n                repository(owner: $owner, name: $repo) {\n                  refs(first: 0, refPrefix: "refs/heads/") {\n                    totalCount\n                  }\n                }\n              }\n            `,\n              {\n                owner: gitUrl.owner,\n                repo: gitUrl.name,\n                headers: {\n                  authorization: \'Bearer \' + token,\n                },\n              }\n            ) as GraphQlQueryResponseData;\n            \n            console.log("BranchCountFactCollector: " + gitUrl.owner + ": " + gitUrl.name + ": " + "Total Count: "\n            + response["repository"]["refs"]["totalCount"]);\n\n            return this.buildFact(entityRef, factRef, response["repository"]["refs"]);\n          }),\n      );\n    } catch (e) {\n      this.#logger.error(`Failed to collect branch data with error: ${e}`);\n      return Promise.reject([]);\n    }\n  }\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"collect")," function will get the fact that is to be used for the checks.  The token needed for authentication is retrieved here:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const { token } = await this.#credentialsProvider.getCredentials({ url: entityScmUrl });\n")),(0,o.kt)("p",null,"Finally the following section will make outbound request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"            const response = await graphql(\n              `\n              query numBranches($owner: String!, $repo: String!) {\n                repository(owner: $owner, name: $repo) {\n                  refs(first: 0, refPrefix: \"refs/heads/\") {\n                    totalCount\n                  }\n                }\n              }\n            `,\n              {\n                owner: gitUrl.owner,\n                repo: gitUrl.name,\n                headers: {\n                  authorization: 'Bearer ' + token,\n                },\n              }\n            ) as GraphQlQueryResponseData;\n")),(0,o.kt)("p",null,"The files ",(0,o.kt)("inlineCode",{parentName:"p"},"branchcountextractorsstore.ts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"utils.ts")," define how the configuration and schema work."),(0,o.kt)("p",null,"The basic template for creating a custom fact collector is below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { FactCollector } from '@spotify/backstage-plugin-soundcheck-node';\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  CollectionConfig,\n  Fact,\n  FactRef,\n} from '@spotify/backstage-plugin-soundcheck-common';\n\u200b\nexport class ExampleFactCollector implements FactCollector {\n  public static ID = 'example';\n\u200b\n  public static create(): ExampleFactCollector {\n    return new ExampleFactCollector();\n  }\n\u200b\n  collect(\n    entities: Entity[],\n    params?: { factRefs?: FactRef[]; refresh?: FactRef[] },\n  ): Promise<Fact[]> {\n    return Promise.resolve([]);\n  }\n\u200b\n  getCollectionConfigs(): Promise<CollectionConfig[]> {\n    return Promise.resolve([]);\n  }\n\u200b\n  getDataSchema(factRef: FactRef): Promise<string | undefined> {\n    return Promise.resolve(undefined);\n  }\n\u200b\n  getFactNames(): Promise<string[]> {\n    return Promise.resolve([]);\n  }\n}\n")),(0,o.kt)("p",null,"After starting Backstage, Soundcheck should look like:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Custom Fact Image",src:n(7521).Z,width:"1199",height:"595"})),(0,o.kt)("h3",{id:"commit-7-add-branch-protection-checks"},"Commit #7: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/9898ae2c0af84ff1bbade6f1ea7a3b57d5948dc6"},"Add Branch Protection Checks")),(0,o.kt)("p",null,"This commit adds checks for branch protection of GitHub repos.  More documentation can be found ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend-module-github"},"here")),(0,o.kt)("p",null,"These checks follows the same pattern as ",(0,o.kt)("a",{parentName:"p",href:"#commit-4-add-github-collector-and-basic-program"},"Commit #4: Add GitHub Collector and Basic Program"),".  Under the hood Soundcheck will call the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/branches/branch-protection?apiVersion=2022-11-28"},"get-branch-protection")," GitHub API.  Example response:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "url": "https://api.github.com/repos/ThayerAltman/node-app/branches/master/protection",\n    "required_pull_request_reviews": {\n        "url": "https://api.github.com/repos/ThayerAltman/node-app/branches/master/protection/required_pull_request_reviews",\n        "dismiss_stale_reviews": false,\n        "require_code_owner_reviews": true,\n        "require_last_push_approval": false,\n        "required_approving_review_count": 2\n    },\n    "required_signatures": {\n        "url": "https://api.github.com/repos/ThayerAltman/node-app/branches/master/protection/required_signatures",\n        "enabled": false\n    },\n    "enforce_admins": {\n        "url": "https://api.github.com/repos/ThayerAltman/node-app/branches/master/protection/enforce_admins",\n        "enabled": false\n    },\n    "required_linear_history": {\n        "enabled": false\n    },\n    "allow_force_pushes": {\n        "enabled": false\n    },\n    "allow_deletions": {\n        "enabled": false\n    },\n    "block_creations": {\n        "enabled": false\n    },\n    "required_conversation_resolution": {\n        "enabled": false\n    },\n    "lock_branch": {\n        "enabled": false\n    },\n    "allow_fork_syncing": {\n        "enabled": false\n    }\n}\n')),(0,o.kt)("h3",{id:"commit-8-add-post-only-check"},"Commit #8: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/af6a67ff6e54d51756384c86ade367797a57b1f6"},"Add POST Only Check")),(0,o.kt)("p",null,"This commit adds a check to be used with the POST method of validating checks in Soundcheck.  More information can be found ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend#facts-api"},"here"),".  The check added to soundcheck-checks.yaml is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: github_actions_tests_passing\n  rule:\n    factRef: custom:default/github_actions_test\n    path: $.testPassed\n    operator: equal\n    value: true\n")),(0,o.kt)("p",null,"This is a custom fact that will not have a collector associated with it.  Soundcheck will not cache the facts for this check, but only save the result of the checks.  The check is added to the program below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- ordinal: 2\n  checks:\n    - id: github_actions_tests_passing\n      name: CI/CD Tests passing\n      description: >\n        The last tests run in GitHub Actions were successful.\n")),(0,o.kt)("p",null,"The goal of this check is to fail when the tests running in a GitHub workflow fail.  When the tests fail, GitHub will make a POST request to our backstage indicating that the tests have failed.  Additionally the program was changed to only be relevant to services with the python flag."),(0,o.kt)("p",null,"The POST message that will fail or pass the check is below:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"POST localhost:7007/api/soundcheck/facts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "facts": [\n        {\n            "factRef": "custom:default/github_actions_test",\n            "entityRef": "component:default/simple-python-service",\n            "data": {\n                "testPassed": true\n            }\n        }\n    ]\n}\n')),(0,o.kt)("p",null,"or curl:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl                                        \\\n-H "Content-Type: application/json"         \\\n-X POST localhost:7007/api/soundcheck/facts \\\n-d @- << EOF\n{                                                            \n    "facts": [                                                        \n        {                                                             \n            "factRef": "custom:default/github_actions_test",          \n            "entityRef": "component:default/simple-python-service",   \n            "data": {                                                 \n                "testPassed": true                                    \n            }                                                         \n        }                                                             \n    ]                                                                 \n}\nEOF\n')),(0,o.kt)("p",null,"Sending the above request to backstage should result in the following test passing or failing depending on the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"testPassed"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Post Check Image",src:n(905).Z,width:"816",height:"377"})),(0,o.kt)("h3",{id:"commit-9-add-catalog-fact-collector"},"Commit #9: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/71ab8ae7e6587440fadeff6022fdb131f5d6dc8e"},"Add Catalog Fact Collector")),(0,o.kt)("p",null,"This commit adds two catalog checks.  They will verify if certain keys are present and set to certain values in the ",(0,o.kt)("inlineCode",{parentName:"p"},"catalog-info.yaml")," file.  The two checks added were:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: lifecycle_defined\n  rule:\n    any:\n      - factRef: catalog:default/entity_descriptor\n        path: $.spec.lifecycle\n        operator: equal\n        value: experimental\n      - factRef: catalog:default/entity_descriptor\n        path: $.spec.lifecycle\n        operator: equal\n        value: production\n  schedule:\n    frequency:\n      cron: '* * * * *'\n    filter:\n      kind: 'Component'\n- id: has_pagerduty_integration_key\n  rule:\n    factRef: catalog:default/entity_descriptor\n    path: $.metadata.annotations[\"pagerduty.com/integration-key\"]\n    operator: matches\n    value: .+\n  schedule:\n    frequency:\n      cron: '* * * * *'\n    filter:\n      kind: 'Component'\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"lifecycle_defined")," will pass if ",(0,o.kt)("inlineCode",{parentName:"p"},"spec.lifecycle")," is defined and either ",(0,o.kt)("inlineCode",{parentName:"p"},"experimental")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"production"),".  Below is an example of a ",(0,o.kt)("inlineCode",{parentName:"p"},"catalog-info.yaml")," that will cause this check to pass:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: "simple-python-service"\n  tags: [python]\n  languages: [python]\n  annotations:\n    pagerduty.com/integration-key: 123456789abcdef1234567890abcdef\nspec:\n  type: service\n  owner: group:web-backend\n  lifecycle: production\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"has_pagerduty_integration_key")," will pass if ",(0,o.kt)("inlineCode",{parentName:"p"},'metadata.annotations["pagerduty.com/integration-key"]')," is defined.  The example ",(0,o.kt)("inlineCode",{parentName:"p"},"catalog-info.yaml")," above will also cause this check to pass."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"In order for catalog facts to be collected, a ",(0,o.kt)("inlineCode",{parentName:"strong"},"schedule")," with ",(0,o.kt)("inlineCode",{parentName:"strong"},"filter")," is needed.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  schedule:\n    frequency:\n      cron: '* * * * *'\n    filter:\n      kind: 'Component'\n")),(0,o.kt)("p",null,"Since the collector for catalog information is built into Soundcheck there is no need for a collector.yaml file.  As a result, adding the schedule to the check is how Soundcheck is told when to collect these facts.  Additionally, the filter informs Soundcheck which type of entities to collect these facts from."),(0,o.kt)("h3",{id:"commit-10-add-soundcheck-collector"},"Commit #10: ",(0,o.kt)("a",{parentName:"h3",href:"https://github.com/ThayerAltman/example-backstage/commit/b7c416a5d6f3e44706c4b38fa7f6d4bb2d0801dc"},"Add Soundcheck Collector")),(0,o.kt)("p",null,"This commits add two Soundcheck checks.  These checks will aggregate the results of other Soundcheck programs.  Both checks do roughly the same thing, looking at the first check:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: is_level_one_certified_branch_protections_and_number\n  rule:\n    all:\n      - factRef: soundcheck:default/program/branch-protections\n        path: $.highestLevel.ordinal\n        operator: greaterThanInclusive\n        value: 1\n      - factRef: soundcheck:default/program/number-of-branches\n        path: $.highestLevel.ordinal\n        operator: greaterThanInclusive\n        value: 1\n  schedule:\n    frequency:\n      cron: '* * * * *'\n    filter:\n      kind: 'Component'\n")),(0,o.kt)("p",null,"Similar to the Catalog check, this check does not have a dedicated collector yaml file.  As a result, it requires a ",(0,o.kt)("inlineCode",{parentName:"p"},"schedule")," with a ",(0,o.kt)("inlineCode",{parentName:"p"},"filter")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"frequency"),".  This check will look at the certification level of two Soundcheck programs ",(0,o.kt)("inlineCode",{parentName:"p"},"branch-protections")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"number-of-branches"),".  It will pass if ",(0,o.kt)("strong",{parentName:"p"},"both")," programs have at least certification level 1 for a given entity.  "),(0,o.kt)("p",null,"In addition to ",(0,o.kt)("inlineCode",{parentName:"p"},"$.highestLevel.ordinal")," there are other fields that can be tested against.  Below is the schema for a certification found in ",(0,o.kt)("inlineCode",{parentName:"p"},"node_modules/@spotify/backstage-plugin-soundcheck-common/dist/index.cjs.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"  type Certification {\n    entityRef: String!\n    program: Program!\n    levels: [LevelResult!]!\n    highestLevel: LevelResult\n  }\n\n...\n\n  type LevelResult {\n    ordinal: Int!\n    name: String!\n    badge: Badge\n    description: String\n    checks: [CheckResult!]!\n    certified: Boolean\n    entityRef: String!\n  }\n")),(0,o.kt)("p",null,"The above checks with the ",(0,o.kt)("inlineCode",{parentName:"p"},"two-programs-aggregate")," program result in the following Soundcheck page:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Aggregate Program Image",src:n(6224).Z,width:"1190",height:"764"})))}h.isMDXComponent=!0},6224:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/aggregate-program-b7f85dd5802e9bdeb6521a829f66c324.png"},7521:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/custom-fact-7fa23b03fb32f16a8fdeec19bc6cd3d1.png"},4953:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/first-checks-9918776f0ed049cd16cdc9b84d64c1c1.png"},905:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/post-check-8c73765c17b9b208be21417475150861.png"},9334:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/side-bar-47021a1b1c9edc2f3899c7dc7502f2d3.png"},7031:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/soundcheck-entry-aa14d14f7a26846aa41ed7ee7bb03713.png"},8078:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tab-menu-5234191760e4e04bf02ece634f449c79.png"},7793:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/test-certified-5f6c1ef29bc671d9420544cd1b314258.png"}}]);