"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[816],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?i.createElement(m,r(r({ref:t},c),{},{components:n})):i.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8267:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const o={title:"Setup & Installation",sidebar_position:2},r="Installation & Setup",s={unversionedId:"rbac/setup-and-installation",id:"rbac/setup-and-installation",title:"Setup & Installation",description:"Prerequisites",source:"@site/docs/rbac/setup-and-installation.mdx",sourceDirName:"rbac",slug:"/rbac/setup-and-installation",permalink:"/rbac/setup-and-installation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rbac/setup-and-installation.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Setup & Installation",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"RBAC",permalink:"/rbac/"},next:{title:"Core Concepts",permalink:"/rbac/core-concepts"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Enable B2B Auth",id:"enable-b2b-auth",level:3},{value:"Identity Resolver",id:"identity-resolver",level:3},{value:"Set up the permission framework",id:"set-up-the-permission-framework",level:3},{value:"Backend Installation",id:"backend-installation",level:2},{value:"Getting the plugin",id:"getting-the-plugin",level:3},{value:"Configure RBAC administrator users",id:"configure-rbac-administrator-users",level:3},{value:"Configure permissioned plugins",id:"configure-permissioned-plugins",level:3},{value:"Install RBAC backend",id:"install-rbac-backend",level:3},{value:"Frontend Installation",id:"frontend-installation",level:2},{value:"Getting the plugin",id:"getting-the-plugin-1",level:3},{value:"Install RBAC frontend",id:"install-rbac-frontend",level:3},{value:"Configure an initial policy",id:"configure-an-initial-policy",level:3},{value:"Add RBAC policy in the permission framework",id:"add-rbac-policy-in-the-permission-framework",level:3},{value:"Check everything is working",id:"check-everything-is-working",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"installation--setup"},"Installation & Setup"),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"The RBAC plugin depends on a few other Backstage systems and features. It's possible that your Backstage instance already have some portion of these steps set up. If any of these are not yet set up, you'll need to set them up before installing RBAC."),(0,a.kt)("h3",{id:"enable-b2b-auth"},"Enable B2B Auth"),(0,a.kt)("p",null,"Backend-to-backend authentication lets backend code in Backstage securely verify that a given request originates from another part of the backend, rather than from a user. This is useful for tasks like indexing catalog entities for search. This type of request shouldn\u2019t be permissioned, so this feature must be enabled before turning on permissions."),(0,a.kt)("p",null,"To set up backend-to-backend authentication, follow the ",(0,a.kt)("a",{parentName:"p",href:"https://backstage.io/docs/auth/service-to-service-auth#setup"},"setup instructions in the backstage.io docs"),"."),(0,a.kt)("h3",{id:"identity-resolver"},"Identity Resolver"),(0,a.kt)("p",null,"Like many other parts of Backstage, both the permission framework and the RBAC policy rely on group membership. This allows the RBAC configuration to have groups as members of a role, rather than exhaustively listing each person in the desired groups."),(0,a.kt)("p",null,"Group membership is also useful for policy decisions \u2014 for example, allowing someone to act on an entity when they are a member of the group that owns it."),(0,a.kt)("p",null,"When populating groups, include any groups that you plan to assign an RBAC role, and any groups that have a corresponding catalog entity."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://backstage.io/docs/auth/identity-resolver"},"The IdentityResolver docs on backstage.io")," describe the process for resolving group membership on sign in. If you can see a reference to a sensible entity and groups on your Backstage profile, you're ready to go."),(0,a.kt)("h3",{id:"set-up-the-permission-framework"},"Set up the permission framework"),(0,a.kt)("p",null,"Before you can use RBAC, you\u2019ll need to ",(0,a.kt)("a",{parentName:"p",href:"https://backstage.io/docs/permissions/getting-started"},"set up the permission framework")," in Backstage. Since we'll be replacing the policy with the dynamic one supplied by RBAC, you don't need to complete the steps associated with policy authoring -- you can stop once you've ",(0,a.kt)("a",{parentName:"p",href:"https://backstage.io/docs/permissions/getting-started#2-enable-and-test-the-permissions-system"},"enabled and tested the permissions system"),"."),(0,a.kt)("h2",{id:"backend-installation"},"Backend Installation"),(0,a.kt)("h3",{id:"getting-the-plugin"},"Getting the plugin"),(0,a.kt)("p",null,"Add the RBAC packages as dependencies to your Backstage instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace backend add @spotify/backstage-plugin-rbac-backend\n")),(0,a.kt)("h3",{id:"configure-rbac-administrator-users"},"Configure RBAC administrator users"),(0,a.kt)("p",null,"The ability to view and adjust the RBAC policy configuration is granted to a fixed set of users and groups specified by the configuration property ",(0,a.kt)("inlineCode",{parentName:"p"},"permission.rbac.authorizedUsers"),". Any other users visiting ",(0,a.kt)("inlineCode",{parentName:"p"},"/rbac")," will see an error."),(0,a.kt)("p",null,"Add the ",(0,a.kt)("a",{parentName:"p",href:"https://backstage.io/docs/features/software-catalog/references"},"entity references")," for the Backstage users and groups who should be permitted to configure RBAC to your app-config.yaml as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"permission:\n  enabled: true\n  rbac:\n    authorizedUsers:\n      - group:default/admins\n      - user:default/alice\n      - user:default/bob\n")),(0,a.kt)("h3",{id:"configure-permissioned-plugins"},"Configure permissioned plugins"),(0,a.kt)("p",null,"In order for the RBAC UI to aggregate information about the available permissions in Backstage, it's necessary to provide a list of plugins which include permissions in the RBAC configuration. At time of writing, the only first-party Backstage plugin which includes permissions is ",(0,a.kt)("inlineCode",{parentName:"p"},"catalog"),". If you're using third-party or in-house plugins which include permissions, you should include those plugins as well."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"  permission:\n    enabled: true\n+   permissionedPlugins:\n+     - catalog\n    rbac:\n      authorizedUsers:\n        - group:default/admins\n        - user:default/alice\n        - user:default/bob\n")),(0,a.kt)("h3",{id:"install-rbac-backend"},"Install RBAC backend"),(0,a.kt)("p",null,"The RBAC backend handles storing policy configuration in the database and exposing it to the RBAC UI and to the RBAC policy running inside the permission framework."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add the following to a new file, ",(0,a.kt)("inlineCode",{parentName:"p"},"packages/backend/src/plugins/rbac.ts"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createRouter } from '@spotify/backstage-plugin-rbac-backend';\nimport { Router } from 'express';\nimport type { PluginEnvironment } from '../types';\n\nexport default function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  return createRouter(env);\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Wire up the RBAC backend in ",(0,a.kt)("inlineCode",{parentName:"p"},"packages/backend/src/index.ts"),". You\u2019ll need to import the module from the previous step, create a plugin environment, and add the router to the express app:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"  // packages/backend/src/index.ts\n\n  import proxy from './plugins/proxy';\n  import techdocs from './plugins/techdocs';\n  import search from './plugins/search';\n  import permission from './plugins/permission';\n+ import rbac from './plugins/rbac';\n\n  /* ... */\n\n  const techdocsEnv = useHotMemoize(module, () => createEnv('techdocs'));\n  const searchEnv = useHotMemoize(module, () => createEnv('search'));\n  const appEnv = useHotMemoize(module, () => createEnv('app'));\n  const permissionEnv = useHotMemoize(module, () => createEnv('permission'));\n+ const rbacEnv = useHotMemoize(module, () => createEnv('rbac'));\n\n  /* ... */\n\n  apiRouter.use('/techdocs', await techdocs(techdocsEnv));\n  apiRouter.use('/proxy', await proxy(proxyEnv));\n  apiRouter.use('/search', await search(searchEnv));\n  apiRouter.use('/permission', await permission(permissionEnv));\n+ apiRouter.use('/rbac', await rbac(rbacEnv));\n")))),(0,a.kt)("h2",{id:"frontend-installation"},"Frontend Installation"),(0,a.kt)("h3",{id:"getting-the-plugin-1"},"Getting the plugin"),(0,a.kt)("p",null,"Add the RBAC packages as dependencies to your Backstage instance:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn workspace app add @spotify/backstage-plugin-rbac\n")),(0,a.kt)("h3",{id:"install-rbac-frontend"},"Install RBAC frontend"),(0,a.kt)("p",null,"First install the RBAC routes in the app within the ",(0,a.kt)("inlineCode",{parentName:"p"},"packages/app/src/App.tsx"),". This will provide the UI for authoring your RBAC policy under the ",(0,a.kt)("inlineCode",{parentName:"p"},"/rbac")," route. Note that this route can only be accessed by the ",(0,a.kt)("inlineCode",{parentName:"p"},"authorizedUsers")," configured above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"  // packages/app/src/App.tsx\n\n+ import { RBACRoot } from '@spotify/backstage-plugin-rbac';\n\n  /* ... */\n\n  const routes = (\n    <FlatRoutes>\n      /* ... */\n+     <Route path=\"/rbac\" element={<RBACRoot />} />\n    </FlatRoutes>\n  );\n")),(0,a.kt)("p",null,"RBAC also provides a sidebar item that will only be visible to RBAC ",(0,a.kt)("inlineCode",{parentName:"p"},"authorizedUsers"),". This is an optional step, but it provides an easy way for RBAC authorized users to access the plugin."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'  // packages/app/src/components/Root.tsx\n\n+ import { RBACSidebarItem } from \'@spotify/backstage-plugin-rbac\';\n\nexport const Root = ({ children }: PropsWithChildren<{}>) => (\n  <SidebarPage>\n    <Sidebar>\n      <SidebarLogo />\n\n      /* ... */\n\n      <SidebarScrollWrapper>\n        <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />\n        <SidebarItem\n          icon={SkillExchangeIcon}\n          to="skill-exchange"\n          text="Skill Exchange"\n        />\n        <SidebarItem icon={PulseIcon} to="pulse" text="Pulse" />\n        <SidebarItem icon={SoundcheckIcon} to="soundcheck" text="Soundcheck" />\n+       <RBACSidebarItem />\n      </SidebarScrollWrapper>\n    </Sidebar>\n  </SidebarPage>\n);\n')),(0,a.kt)("h3",{id:"configure-an-initial-policy"},"Configure an initial policy"),(0,a.kt)("p",null,"When there is no published RBAC policy, the default behaviour of RBAC is to deny all authorization requests sent to the permission framework. With this in mind, it's preferable to publish a simple RBAC policy before proceeding to install RBAC in the permission framework."),(0,a.kt)("p",null,"The following instructions configure RBAC with a policy that allows all authorization requests. If you want to start with something more complex, refer to later sections of this documentation."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Open the RBAC UI by visiting the ",(0,a.kt)("inlineCode",{parentName:"li"},"/rbac")," path in your Backstage instance, or clicking the RBAC item in the sidebar (if you've installed the ",(0,a.kt)("inlineCode",{parentName:"li"},"RBACSidebarItem"),")."),(0,a.kt)("li",{parentName:"ol"},'Click "New Version" to start working on a new draft policy, and choose a name for it.'),(0,a.kt)("li",{parentName:"ol"},'Click "New Role" to create a role within the policy, and give that a name too.'),(0,a.kt)("li",{parentName:"ol"},'Click the "New Permission Decision" button in the Permission Decisions table on the right hand side.'),(0,a.kt)("li",{parentName:"ol"},'In the dialog, select "Match All Permissions".'),(0,a.kt)("li",{parentName:"ol"},'Confirm that "Allow" is already selected at the bottom of the dialog.'),(0,a.kt)("li",{parentName:"ol"},'Click "Save".'),(0,a.kt)("li",{parentName:"ol"},'Confirm that the Members table on the left hand side contains a row for "All" users.'),(0,a.kt)("li",{parentName:"ol"},'Click "Back to Policy"'),(0,a.kt)("li",{parentName:"ol"},'Click "Save Draft"'),(0,a.kt)("li",{parentName:"ol"},'Click "Publish", and confirm publishing in the confirmation dialog.')),(0,a.kt)("h3",{id:"add-rbac-policy-in-the-permission-framework"},"Add RBAC policy in the permission framework"),(0,a.kt)("p",null,"To use the RBAC policy in the Backstage instance, we replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestPermissionPolicy")," we created when setting up the permission framework with an ",(0,a.kt)("inlineCode",{parentName:"p"},"RBACPolicy")," instance which uses the roles we define in the UI."),(0,a.kt)("p",null,"Adjust ",(0,a.kt)("inlineCode",{parentName:"p"},"packages/backend/src/plugins/permission.ts")," as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"  import { createRouter } from '@backstage/plugin-permission-backend';\n- import {\n-   AuthorizeResult,\n-   PolicyDecision,\n- } from '@backstage/plugin-permission-common';\n- import { PermissionPolicy } from '@backstage/plugin-permission-node';\n+ import { RBACPolicyBuilder } from '@spotify/backstage-plugin-rbac-backend';\n  import { Router } from 'express';\n  import { PluginEnvironment } from '../types';\n\n- class TestPermissionPolicy implements PermissionPolicy {\n-   async handle(): Promise<PolicyDecision> {\n-     return { result: AuthorizeResult.ALLOW };\n-   }\n- }\n-\n  export default async function createPlugin(\n    env: PluginEnvironment,\n  ): Promise<Router> {\n    return await createRouter({\n      config: env.config,\n      logger: env.logger,\n      discovery: env.discovery,\n-     policy: new TestPermissionPolicy(),\n+     policy: await RBACPolicyBuilder.create(env).build(),\n      identity: env.identity,\n    });\n }\n")),(0,a.kt)("h3",{id:"check-everything-is-working"},"Check everything is working"),(0,a.kt)("p",null,"If you've followed all the steps up to this point, the RBAC policy is now in place! You should find that Backstage adheres to the policy you configured in step 3. If you have any problems, please reach out to us and we'll be happy to provide support."))}d.isMDXComponent=!0}}]);