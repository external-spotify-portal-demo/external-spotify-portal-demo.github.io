"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[537],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),m=r,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||l;return a?n.createElement(k,i(i({ref:t},p),{},{components:a})):n.createElement(k,i({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1841:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const l={title:"Fact checks",sidebar_position:2},i=void 0,o={unversionedId:"soundcheck/core-concepts/fact-checks",id:"soundcheck/core-concepts/fact-checks",title:"Fact checks",description:"Overall shape of a fact check",source:"@site/docs/soundcheck/core-concepts/fact-checks.mdx",sourceDirName:"soundcheck/core-concepts",slug:"/soundcheck/core-concepts/fact-checks",permalink:"/soundcheck/core-concepts/fact-checks",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/soundcheck/core-concepts/fact-checks.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Fact checks",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Tracks",permalink:"/soundcheck/core-concepts/tracks"},next:{title:"Fact collectors",permalink:"/soundcheck/core-concepts/fact-collectors"}},s={},d=[{value:"Overall shape of a fact check",id:"overall-shape-of-a-fact-check",level:2},{value:"Fields",id:"fields",level:2},{value:"Rules",id:"rules",level:3},{value:"Operators",id:"operators",level:3},{value:"Schedule",id:"schedule",level:3},{value:"Executing Checks",id:"executing-checks",level:2},{value:"Examples",id:"examples",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overall-shape-of-a-fact-check"},"Overall shape of a fact check"),(0,r.kt)("p",null,"A fact check defines a ",(0,r.kt)("a",{parentName:"p",href:"#rules"},"rule"),", comprised of one or more conditions: a combination of facts,\n",(0,r.kt)("a",{parentName:"p",href:"#operators"},"operators"),", and values that determine whether the check emits a ",(0,r.kt)("inlineCode",{parentName:"p"},"passed")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"failed"),"\ncheck result to Soundcheck."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"id: has_pagerduty_integration_key\nrule:\n  factRef: catalog:default/entity_descriptor\n  path: $.metadata.annotations[pagerduty.com/integration-key]\n  operator: matches\n  value: .+\n  failedMessage: |\n    No PagerDuty Integration Key defined for this entity.\n")),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"The unique identifier for this fact check.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"A name for the fact check suitable for display on a UI.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"description")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"A description of the fact check suitable for display on a UI.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"One or more conditions that determine check result.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"passedMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Message if the check passes.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"failedMessage")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Message if the check fails.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"schedule")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"How often and on what entities the fact check should run.")))),(0,r.kt)("p",null,"Below is an example fact check which checks if a PagerDuty integration key is present in an entity's metadata:"),(0,r.kt)("h3",{id:"rules"},"Rules"),(0,r.kt)("p",null,"A rule contains one or more conditions."),(0,r.kt)("p",null,"The simplest form of a condition consists of a fact reference, an ",(0,r.kt)("a",{parentName:"p",href:"#operators"},"operator"),",\nand a ",(0,r.kt)("em",{parentName:"p"},"value"),". When the check is executed, the operator is\nused to compare the fact against the value."),(0,r.kt)("p",null,"Example of a simple condition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"rule:\n  factRef: catalog:default/entity_descriptor\n  path: $.metadata.annotations[pagerduty.com/integration-key]\n  operator: matches\n  value: .+\n  failedMessage: |\n    No PagerDuty Integration Key defined for this entity.\n")),(0,r.kt)("p",null,"More complex conditions can by created through the use of boolean expressions. A rule may\noptionally have either an ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," or an ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," expression at its root, containing an array of\nconditions. The ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," operator specifies that ",(0,r.kt)("em",{parentName:"p"},"all")," conditions\ncontained within must be truthy for the check to pass. The ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," operator only requires one\ncondition to be truthy for the check to pass."),(0,r.kt)("p",null,"Example of a complex condition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"rule:\n  any:\n    - factRef: catalog:default/entity_descriptor\n      path: $.metadata.labels['language']\n      operator: equal\n      value: java\n    - factRef: catalog:default/entity_descriptor\n      path: $.metadata.labels['language']\n      operator: equal\n      value: kotlin\n")),(0,r.kt)("h3",{id:"operators"},"Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operator"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"equal")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact must equal value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"notEqual")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact must not equal value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"matches")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact string matches given value regex.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverGt")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version must be greater than value version.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverGte")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version must be greater than or equal to value version.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverLt")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version must be less than value version.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverLte")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version must be less than or equal to value version.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverEq")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version must equal value version.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverNeq")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version must not equal value version.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverSatisfies")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version satisfies value range.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverGtr")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version is greater than all versions in value range.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"semverLtr")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact version is less than all versions in value range.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lessThan")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact must be less than value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"lessThanInclusive")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact must be less than or equal to value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"greaterThan")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact must be greater than value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"greaterThanInclusive")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact must be greater than or equal to value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"in")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact must be included in array value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"notIn")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact must not be included in array value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"contains")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact array must include value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"doesNotContain")),(0,r.kt)("td",{parentName:"tr",align:null},"Fact array must not include value.")))),(0,r.kt)("h3",{id:"schedule"},"Schedule"),(0,r.kt)("p",null,"Scheduling options for fact checks:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"frequency")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Cron expression or HumanDuration for check execution frequency.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"entityRefs")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Entities to run check on (overrides filter).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"filter")),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter for entities to run check on.")))),(0,r.kt)("h2",{id:"executing-checks"},"Executing Checks"),(0,r.kt)("p",null,"Fact checks are executed by Soundcheck:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"When a dependent fact is updated."),(0,r.kt)("li",{parentName:"ol"},"Via scheduled execution based on frequency and entities."),(0,r.kt)("li",{parentName:"ol"},"Manually triggered via the ",(0,r.kt)("a",{parentName:"li",href:"#checks-api"},"Checks API"),".")),(0,r.kt)("p",null,"For more details, refer to the original documentation."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n- id: has_less_than_ten_open_issues\n  rule:\n    factRef: github:default/repo_details\n    path: $.open_issues\n    operator: lessThan\n    value: 10\n  passedMessage: |\n    Less than 10 open issues\n  failedMessage: |\n    Ten or more open issue(s)\n- id: is_repo_private\n  rule:\n    factRef: github:default/repo_details\n    path: $.private\n    operator: equal\n    value: true\n  passedMessage: |\n    Repo is private\n  failedMessage: |\n    Repo is not private, change repo to private\n- id: default_branch_is_main\n  rule:\n    factRef: github:default/repo_details\n    path: $.default_branch\n    operator: equal\n    value: main\n  passedMessage: |\n    Default banch is main\n  failedMessage: |\n    Change default branch to main\n- id: has_readme_check # The name of the check\n  rule: # How to evaluate this check\n    factRef: scm:default/readme_and_catalog_info_files_exist_fact # The fact data to reference\n    path: $.readme_exists # The path to the field to analyze\n    operator: equal # Indicates the operation to apply\n    value: true # The desired value of the field indicated in path, above.\n- id: has_catalog_info_file_check\n  rule:\n    factRef: scm:default/readme_and_catalog_info_files_exist_fact\n    path: $.catalog_info_exists\n    operator: equal\n    value: true\n- id: has_pagerduty_integration_key\n  rule:\n    factRef: catalog:default/entity_descriptor\n    path: $.metadata.annotations[\"pagerduty.com/integration-key\"]\n    operator: matches\n    value: .+\n  schedule:\n    frequency:\n      cron: '*/5 * * * 1-5'\n    filter:\n      kind: 'Component'\n\n- id: has_description\n  rule:\n    factRef: github:default/repo_details\n    path: $.description\n    operator: matches\n    value: .+\n  passedMessage: |\n    Repo has a description\n  failedMessage: |\n    Repo does not have a description\n")))}u.isMDXComponent=!0}}]);