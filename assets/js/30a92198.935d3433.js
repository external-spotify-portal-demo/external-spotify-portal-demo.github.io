"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8575],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var c=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);t&&(c=c.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,c)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,c,o=function(e,t){if(null==e)return{};var a,c,o={},n=Object.keys(e);for(c=0;c<n.length;c++)a=n[c],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(c=0;c<n.length;c++)a=n[c],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=c.createContext({}),s=function(e){var t=c.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=s(e.components);return c.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return c.createElement(c.Fragment,{},t)}},f=c.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(a),f=o,h=d["".concat(i,".").concat(f)]||d[f]||p[f]||n;return a?c.createElement(h,r(r({ref:t},u),{},{components:a})):c.createElement(h,r({ref:t},u))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,r=new Array(n);r[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<n;s++)r[s]=a[s];return c.createElement.apply(null,r)}return c.createElement.apply(null,a)}f.displayName="MDXCreateElement"},3675:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>n,metadata:()=>l,toc:()=>s});var c=a(7462),o=(a(7294),a(3905));const n={title:"Fact collectors",sidebar_position:3},r=void 0,l={unversionedId:"soundcheck/core-concepts/fact-collectors",id:"soundcheck/core-concepts/fact-collectors",title:"Fact collectors",description:"Fact Framework",source:"@site/docs/soundcheck/core-concepts/fact-collectors.mdx",sourceDirName:"soundcheck/core-concepts",slug:"/soundcheck/core-concepts/fact-collectors",permalink:"/soundcheck/core-concepts/fact-collectors",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/soundcheck/core-concepts/fact-collectors.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Fact collectors",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Fact checks",permalink:"/soundcheck/core-concepts/fact-checks"},next:{title:"History",permalink:"/soundcheck/core-concepts/history"}},i={},s=[{value:"Fact Framework",id:"fact-framework",level:2},{value:"Fact Collectors",id:"fact-collectors",level:2},{value:"Catalog Fact Collector",id:"catalog-fact-collector",level:3},{value:"Soundcheck Fact Collector",id:"soundcheck-fact-collector",level:3},{value:"Third Party Integrations",id:"third-party-integrations",level:2},{value:"Source Code Management (SCM) Fact Collector",id:"source-code-management-scm-fact-collector",level:3},{value:"GitHub Fact Collector",id:"github-fact-collector",level:3}],u={toc:s},d="wrapper";function p(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,c.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"fact-framework"},"Fact Framework"),(0,o.kt)("p",null,"Soundcheck's fact framework enables Soundcheck to collect facts (un-opinionated information) about\nan entity. Soundcheck can collect facts about an entity using ",(0,o.kt)("a",{parentName:"p",href:"#fact-collectors"},"Fact Collectors"),", or\nreceive facts on entities through the submission of facts via the ",(0,o.kt)("a",{parentName:"p",href:"#facts-api"},"Facts API"),"."),(0,o.kt)("h2",{id:"fact-collectors"},"Fact Collectors"),(0,o.kt)("p",null,"Soundcheck can be extended with additional ",(0,o.kt)("em",{parentName:"p"},"fact collectors"),". A fact collector can collect one or\nmore facts on a given entity."),(0,o.kt)("p",null,"Soundcheck comes with two built-in fact collectors: catalog and soundcheck. These fact collectors\nare provided by default with additional configuration required. A ",(0,o.kt)("a",{parentName:"p",href:"#fact-checks"},"check")," using facts from these collectors can be defined normally. However, if you'd like the check to execute periodically the check must have a schedule with filter because facts from these collectors are not collected on a schedule. Catalog and soundcheck collectors do not require a collector.yaml file to be present, just the checks."),(0,o.kt)("h3",{id:"catalog-fact-collector"},"Catalog Fact Collector"),(0,o.kt)("p",null,"The catalog fact collector exposes information from Backstage's Software Catalog\nas facts to Soundcheck. It provides a single fact on entities:\n",(0,o.kt)("inlineCode",{parentName:"p"},"catalog:default/entity_descriptor")," which provides the entity's\n",(0,o.kt)("a",{parentName:"p",href:"https://backstage.io/docs/features/software-catalog/descriptor-format"},"descriptor")," as fact data."),(0,o.kt)("p",null,"This enables the creation of ",(0,o.kt)("a",{parentName:"p",href:"#fact-checks"},"checks")," against an entity's metadata, to ensure that it is in compliance\nwith your organizations standards and best practices."),(0,o.kt)("p",null,"An example fact collected by the catalog fact collector:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"factRef: catalog:default/entity_descriptor\nentityRef: component:default/artist-web\ndata:\n  apiVersion: backstage.io/v1alpha1\n  kind: Component\n  metadata:\n    name: artist-web\n    description: The place to be, for great artists\n    labels:\n      example.com/custom: custom_label_value\n    annotations:\n      example.com/service-discovery: artistweb\n      circleci.com/project-slug: github/example-org/artist-website\n    tags:\n      - java\n    links:\n      - url: https://admin.example-org.com\n        title: Admin Dashboard\n        icon: dashboard\n        type: admin-dashboard\n  spec:\n    type: website\n    lifecycle: production\n    owner: artist-relations-team\n    system: public-websites\ntimestamp: 2023-02-20T13:50:35Z\n")),(0,o.kt)("p",null,"An example catalog check:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: has_required_tags\n  rule:\n    any:\n      - factRef: catalog:default/entity_descriptor\n        path: $.metadata.tags\n        operator: contains\n        value: java\n      - factRef: catalog:default/entity_descriptor\n        path: $.metadata.tags\n        operator: contains\n        value: data\n  schedule:\n    frequency:\n      cron: '* * * * *'\n    filter:\n      kind: 'Component'\n  passedMessage: |\n    Tag found, check passed.\n  failedMessage: |\n    No `java` or `data` tag found, check failed.\n")),(0,o.kt)("h3",{id:"soundcheck-fact-collector"},"Soundcheck Fact Collector"),(0,o.kt)("p",null,"The Soundcheck fact collector exposes Soundcheck track certifications\nas facts. It provides facts for each Soundcheck track using the fact reference:\n",(0,o.kt)("inlineCode",{parentName:"p"},"soundcheck:default/program/:programId")," where ",(0,o.kt)("inlineCode",{parentName:"p"},":programId")," is the identifier for the track\nwhose certification is contained in the fact."),(0,o.kt)("p",null,"This enables the creation of ",(0,o.kt)("a",{parentName:"p",href:"#fact-checks"},"checks")," against an entity's certification level in other\ntracks."),(0,o.kt)("h2",{id:"third-party-integrations"},"Third Party Integrations"),(0,o.kt)("p",null,"Soundcheck currently supports two of out-of-the-box third party integrations (TPI):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Source Control Management"),(0,o.kt)("li",{parentName:"ul"},"GitHub")),(0,o.kt)("h3",{id:"source-code-management-scm-fact-collector"},"Source Code Management (SCM) Fact Collector"),(0,o.kt)("p",null,"The SCM fact collector provides integration with source control management providers (GitHub,\nbitbucket, etc.). The SCM module allows for fact extraction from the files hosted by these\nproviders. The types of fact extractions, the list of providers, and full configuration and\nspecification details regarding the SCM module can be found in the SCM module's\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend-module-scm"},"README.md"),"\nfile."),(0,o.kt)("h3",{id:"github-fact-collector"},"GitHub Fact Collector"),(0,o.kt)("p",null,"The GitHub fact collector enables Soundcheck to gather facts regarding GitHub repositories.\nFor full details, see the GitHub module's\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend-module-github"},"README.md"),"\nfile."))}p.isMDXComponent=!0}}]);