"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8978],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),k=l,h=u["".concat(o,".").concat(k)]||u[k]||d[k]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=k;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:l,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),l=(n(7294),n(3905));const r={sidebar_position:4,title:"API Reference"},s=void 0,i={unversionedId:"soundcheck/api",id:"soundcheck/api",title:"API Reference",description:"Checks API",source:"@site/docs/soundcheck/api.mdx",sourceDirName:"soundcheck",slug:"/soundcheck/api",permalink:"/soundcheck/api",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/soundcheck/api.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"API Reference"},sidebar:"tutorialSidebar",previous:{title:"Github",permalink:"/soundcheck/3p-integrations/github"},next:{title:"No-code UI",permalink:"/soundcheck/no-code-ui"}},o={},c=[{value:"Checks API",id:"checks-api",level:2},{value:"Get a List of Checks",id:"get-a-list-of-checks",level:3},{value:"Get a Check by ID",id:"get-a-check-by-id",level:3},{value:"Trigger a Set of Checks to Execute",id:"trigger-a-set-of-checks-to-execute",level:3},{value:"Check Results API",id:"check-results-api",level:2},{value:"Submitting Results",id:"submitting-results",level:3},{value:"Request Body",id:"request-body",level:4},{value:"Example Request Body",id:"example-request-body",level:5},{value:"Passed",id:"passed",level:6},{value:"Failed",id:"failed",level:6},{value:"Example Requests",id:"example-requests",level:5},{value:"Responses",id:"responses",level:4},{value:"Example Response Body",id:"example-response-body",level:5},{value:"Example Response Body",id:"example-response-body-1",level:5},{value:"Example Response Body",id:"example-response-body-2",level:5},{value:"Retrieving Results",id:"retrieving-results",level:3},{value:"Query Parameters",id:"query-parameters",level:3},{value:"Example Requests",id:"example-requests-1",level:5},{value:"Responses",id:"responses-1",level:4},{value:"Example Response Body",id:"example-response-body-3",level:5},{value:"Example Response Body",id:"example-response-body-4",level:5},{value:"Facts API",id:"facts-api",level:2},{value:"Submitting Facts",id:"submitting-facts",level:3},{value:"Request Body",id:"request-body-1",level:4},{value:"Example Request Body",id:"example-request-body-1",level:5},{value:"Example Requests",id:"example-requests-2",level:5},{value:"Responses",id:"responses-2",level:4},{value:"Example Response Body",id:"example-response-body-5",level:5},{value:"Track API",id:"track-api",level:2},{value:"Get a List of Tracks",id:"get-a-list-of-tracks",level:3},{value:"Query Parameters",id:"query-parameters-1",level:4},{value:"Get a Track",id:"get-a-track",level:3},{value:"Query Parameters",id:"query-parameters-2",level:4},{value:"Schemas",id:"schemas",level:2},{value:"Check Results Schema",id:"check-results-schema",level:4},{value:"Check Result Schema",id:"check-result-schema",level:4},{value:"Facts Schema",id:"facts-schema",level:4},{value:"Fact Schema",id:"fact-schema",level:4},{value:"Cache Config Schema",id:"cache-config-schema",level:4},{value:"Error Schema",id:"error-schema",level:4}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"checks-api"},"Checks API"),(0,l.kt)("p",null,"Use the Checks API to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"List all checks"),(0,l.kt)("li",{parentName:"ul"},"Get a check by id"),(0,l.kt)("li",{parentName:"ul"},"Execute a check against one more entities.")),(0,l.kt)("p",null,"Each API call is discussed in detail below."),(0,l.kt)("p",null,"NOTE: Your environment may not have checks specified in the app-config.yaml file. Here is\na sample configuration with two checks defined. The first is checking a fact collected by the\nSCM plugin for the existence of a README.md file at the root level of a repository. The second\nanalyzes the metadata returned by the catalog fact collector for the existence of either an internal\nor external metadata tag."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"soundcheck:\n  checks:\n    - id: has_required_tags\n      rule:\n        any:\n          - factRef: catalog:default/entity_descriptor\n            path: $.metadata.tags\n            operator: contains\n            value: internal\n          - factRef: catalog:default/entity_descriptor\n            path: $.metadata.tags\n            operator: contains\n            value: external\n      passedMessage: |\n        Tag found, check passed.\n      failedMessage: |\n        No `internal` or `external` tag found, check failed.\n    - id: has_readme\n      rule:\n        factRef: scm:default/readme\n        path: $.exists\n        operator: equal\n        value: true\n      passedMessage: |\n        README.md was found at repository root, check passed.\n      failedMessage: |\n        README.md was not found at repository root, check failed.\n")),(0,l.kt)("p",null,"The existence of these checks is assumed when executing\nAPI calls in the rest of this Checks API section."),(0,l.kt)("h3",{id:"get-a-list-of-checks"},"Get a List of Checks"),(0,l.kt)("p",null,"The endpoint to get a list of checks is at /api/soundcheck/checks.\nFor a local deployment, the call would look like this:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET localhost:7007/api/soundcheck/checks")),(0,l.kt)("p",null,"With the above check defined, hitting the /checks endpoint will yield the following output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "checks": [\n    {\n      "id": "has_required_tags",\n      "rule": {\n        "any": [\n          {\n            "factRef": "catalog:default/entity_descriptor",\n            "operator": "contains",\n            "value": "internal",\n            "path": "$.metadata.tags"\n          },\n          {\n            "factRef": "catalog:default/entity_descriptor",\n            "operator": "contains",\n            "value": "external",\n            "path": "$.metadata.tags"\n          }\n        ]\n      },\n      "passedMessage": "Tag found, check passed.\\n",\n      "failedMessage": "No `internal` or `external` tag found, check failed.\\n"\n    },\n    {\n      "id": "has_readme",\n      "rule": {\n        "factRef": "scm:default/readme",\n        "operator": "equal",\n        "value": true,\n        "path": "$.exists"\n      },\n      "passedMessage": "README.md was found at repository root, check passed.\\n",\n      "failedMessage": "README.md was not found at repository root, check failed.\\n"\n    }\n  ]\n}\n')),(0,l.kt)("h3",{id:"get-a-check-by-id"},"Get a Check by ID"),(0,l.kt)("p",null,"The endpoint to get a single check by ID is at /api/soundcheck/checks/:checkId.\nFor a local deployment, the call would look like this:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET localhost:7007/api/soundcheck/checks/has_readme")),(0,l.kt)("p",null,"where 'has_readme' above is the check id, which was defined at the beginning of this section."),(0,l.kt)("p",null,"Executing the call above results in the following output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "check": {\n    "id": "has_readme",\n    "rule": {\n      "factRef": "scm:default/readme",\n      "operator": "equal",\n      "value": true,\n      "path": "$.exists"\n    },\n    "passedMessage": "README.md was found at repository root, check passed.\\n",\n    "failedMessage": "README.md was not found at repository root, check failed.\\n"\n  }\n}\n')),(0,l.kt)("h3",{id:"trigger-a-set-of-checks-to-execute"},"Trigger a Set of Checks to Execute"),(0,l.kt)("p",null,"This endpoint allows for a set of checks to be executed in soundcheck. To execute a set of checks,\nPOST to:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST localhost:7007/api/soundcheck/checks/execute")),(0,l.kt)("p",null,"The POST request takes a json request body composed of one of four sets of parameters as follows:"),(0,l.kt)("p",null,"1.) An array of ",(0,l.kt)("inlineCode",{parentName:"p"},"checkIds")," and an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"entityRefs"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "entityRefs": ["component:default/queue-proxy", "component:default/searcher"],\n  "checkIds": ["has_required_tags", "has_readme"]\n}\n')),(0,l.kt)("p",null,"POSTing the above request results in output like the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "results": [\n    {\n      "entityRef": "component:default/queue-proxy",\n      "timestamp": "2023-02-15T19:33:15.945Z",\n      "checkId": "has_required_tags",\n      "state": "failed",\n      "details": {\n        "notes": {\n          "type": "notes",\n          "data": "No `internal` or `external` tag found, check failed.\\n"\n        }\n      }\n    },\n    {\n      "entityRef": "component:default/searcher",\n      "timestamp": "2023-02-15T19:33:15.945Z",\n      "checkId": "has_required_tags",\n      "state": "failed",\n      "details": {\n        "notes": {\n          "type": "notes",\n          "data": "No `internal` or `external` tag found, check failed.\\n"\n        }\n      }\n    }\n  ]\n}\n')),(0,l.kt)("p",null,"Note that the response above has no results for the 'has_readme' check, this is because that check\ndoes not apply to the given components and thus is not executed."),(0,l.kt)("p",null,"2.) An array of ",(0,l.kt)("inlineCode",{parentName:"p"},"checkIds")," and a ",(0,l.kt)("inlineCode",{parentName:"p"},"filter"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "checkIds": ["has_required_tags", "has_readme"],\n  "filter": { "metadata.tags": "java" }\n}\n')),(0,l.kt)("p",null,"This will execute the given list of checks against all entities that match the filter, and return an\noutput similar to the following, which has been truncated for brevity:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "results": [\n        {\n            "entityRef": "component:default/artist-lookup",\n            "timestamp": "2023-02-15T20:24:40.473Z",\n            "checkId": "has_required_tags",\n            "state": "failed",\n            "details": {\n                "notes": {\n                    "type": "notes",\n                    "data": "No `internal` or `external` tag found, check failed.\\n"\n                }\n            }\n        },\n        ...\n      ]\n}\n')),(0,l.kt)("p",null,"3.) A single ",(0,l.kt)("inlineCode",{parentName:"p"},"check")," which is a ",(0,l.kt)("inlineCode",{parentName:"p"},"FactCheckerSchema")," and an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"entityRefs"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "check": {\n    "id": "has_required_tags",\n    "rule": {\n      "factRef": "catalog:default/entity_descriptor",\n      "path": "$.metadata.tags",\n      "operator": "contains",\n      "value": "internal"\n    }\n  },\n  "entityRefs": ["component:default/queue-proxy", "component:default/searcher"]\n}\n')),(0,l.kt)("p",null,"This will execute the supplied check against the given list of entities, and return a results output\nlike the following, where each entry describes the entity and the result of the check:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "results": [\n    {\n      "entityRef": "component:default/queue-proxy",\n      "timestamp": "2023-02-15T20:43:44.990Z",\n      "checkId": "has_required_tags",\n      "state": "failed"\n    },\n    {\n      "entityRef": "component:default/searcher",\n      "timestamp": "2023-02-15T20:43:44.990Z",\n      "checkId": "has_required_tags",\n      "state": "failed"\n    }\n  ]\n}\n')),(0,l.kt)("p",null,"4.) A single ",(0,l.kt)("inlineCode",{parentName:"p"},"check")," which is a ",(0,l.kt)("inlineCode",{parentName:"p"},"FactCheckerSchema")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"filter"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "check": {\n    "id": "has_required_tags",\n    "rule": {\n      "factRef": "catalog:default/entity_descriptor",\n      "path": "$.metadata.tags",\n      "operator": "contains",\n      "value": "internal"\n    }\n  },\n  "filter": { "metadata.tags": "java" }\n}\n')),(0,l.kt)("p",null,"This will execute the given check against all entities matching the filter, and return an array of results\ndescribing the result of the check against all entities which passed the filter:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "results": [\n    {\n      "entityRef": "component:default/artist-lookup",\n      "timestamp": "2023-02-15T20:49:11.601Z",\n      "checkId": "has_required_tags",\n      "state": "failed"\n    },\n    {\n      "entityRef": "component:default/playback-order",\n      "timestamp": "2023-02-15T20:49:11.601Z",\n      "checkId": "has_required_tags",\n      "state": "failed"\n    },\n    {\n      "entityRef": "component:default/podcast-api",\n      "timestamp": "2023-02-15T20:49:11.601Z",\n      "checkId": "has_required_tags",\n      "state": "failed"\n    },\n    {\n      "entityRef": "template:default/springboot-template",\n      "timestamp": "2023-02-15T20:49:11.601Z",\n      "checkId": "has_required_tags",\n      "state": "failed"\n    }\n  ]\n}\n')),(0,l.kt)("p",null,"Finally, this request also allows an optional dry-run query parameter which can be set to empty,\n",(0,l.kt)("inlineCode",{parentName:"p"},"true"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"true")," (or empty, ie: '?dryRun' with no value set) indicates that the request is indeed a dry-run,\nand will execute the checks but will ",(0,l.kt)("strong",{parentName:"li"},"not")," persist the results."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"false")," indicates a standard request to perform the checks and record the results.\nThis is also the default behavior if the ",(0,l.kt)("inlineCode",{parentName:"li"},"dryRun")," parameter is not specified.")),(0,l.kt)("h2",{id:"check-results-api"},"Check Results API"),(0,l.kt)("p",null,"Use the Check Results API to submit and retrieve check results to/from Soundcheck."),(0,l.kt)("h3",{id:"submitting-results"},"Submitting Results"),(0,l.kt)("p",null,"Submit check results to Soundcheck."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST localhost:7007/api/soundcheck/results")),(0,l.kt)("h4",{id:"request-body"},"Request Body"),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#check-results-schema"},"Check Results Schema"),"."),(0,l.kt)("h5",{id:"example-request-body"},"Example Request Body"),(0,l.kt)("h6",{id:"passed"},"Passed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "results": [\n    {\n      "entityRef": "component:default/petstore",\n      "checkId": "tests-run",\n      "state": "passed"\n    }\n  ]\n}\n')),(0,l.kt)("h6",{id:"failed"},"Failed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "results": [\n    {\n      "entityRef": "component:default/petstore",\n      "checkId": "tests-run",\n      "state": "failed",\n      "details": {\n        "notes": {\n          "data": "Tests were not executed."\n        }\n      }\n    }\n  ]\n}\n')),(0,l.kt)("h5",{id:"example-requests"},"Example Requests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'BACKSTAGE_BACKEND=localhost:7007 && \\\ncurl \\\n  -H \'Content-Type: application/json\' \\\n  "${BACKSTAGE_BACKEND}/api/soundcheck/results" \\\n  --data @- << EOF\n{\n  "results": [\n    {\n      "entityRef": "component:default/petstore",\n      "checkId": "tests-run",\n      "state": "passed"\n    }\n  ]\n}\nEOF\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /api/soundcheck/results HTTP/1.1\nHost: localhost:7007\nContent-Type: application/json\nContent-Length: 129\n\n{\n  "results": [\n    {\n      "entityRef": "component:default/petstore",\n      "checkId": "tests-run",\n      "state": "passed"\n    }\n  ]\n}\n')),(0,l.kt)("h4",{id:"responses"},"Responses"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"200 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("p",null,"Returns the check results which are either new or resulted in a change of state."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#check-results-schema"},"Check Results Schema"),"."),(0,l.kt)("h5",{id:"example-response-body"},"Example Response Body"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "results": [\n    {\n      "entityRef": "string",\n      "checkId": "string",\n      "scope": "string",\n      "state": "passed",\n      "details": {\n        "notes": {\n          "type": "notes",\n          "version": 1,\n          "data": "string"\n        }\n      }\n    }\n  ]\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"400 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.5.1"},"Bad Request")),(0,l.kt)("p",null,"Body did not match expected schema."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#error-schema"},"Error Schema"),"."),(0,l.kt)("h5",{id:"example-response-body-1"},"Example Response Body"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "error": {\n    "name": "string",\n    "message": "string",\n    "stack": "string"\n  },\n  "request": {\n    "method": "string",\n    "url": "string"\n  },\n  "response": {\n    "statusCode": 0\n  }\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"500 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("p",null,"Soundcheck encountered an unexpected condition that prevented it from fulfilling the request."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#error-schema"},"Error Schema"),"."),(0,l.kt)("h5",{id:"example-response-body-2"},"Example Response Body"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "error": {\n    "name": "string",\n    "message": "string",\n    "stack": "string"\n  },\n  "request": {\n    "method": "string",\n    "url": "string"\n  },\n  "response": {\n    "statusCode": 0\n  }\n}\n')),(0,l.kt)("h3",{id:"retrieving-results"},"Retrieving Results"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET localhost:7007/api/soundcheck/results")),(0,l.kt)("p",null,"Returns check results for a given entity."),(0,l.kt)("h3",{id:"query-parameters"},"Query Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"entityRef")," ",(0,l.kt)("em",{parentName:"li"},"Required"),". A ",(0,l.kt)("a",{parentName:"li",href:"https://backstage.io/docs/features/software-catalog/references#string-references"},"reference")," to the entity to retrieve check results for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"checks")," ",(0,l.kt)("em",{parentName:"li"},"Optional"),". Filters check results to only those with the provided check ID(s). Accepts multiple values: ",(0,l.kt)("inlineCode",{parentName:"li"},"checks=A,checks=B"))),(0,l.kt)("h5",{id:"example-requests-1"},"Example Requests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"BACKSTAGE_BACKEND=localhost:7007 && \\\ncurl \\\n  -H 'Accept: application/json' \\\n  \"${BACKSTAGE_BACKEND}/api/soundcheck/results?entityRef=component:default/petstore&checks=tests-run\"\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},"GET /api/soundcheck/results?entityRef=component:default/petstore&checks=tests-run HTTP/1.1\nHost: localhost:7007\nAccept: application/json\n")),(0,l.kt)("h4",{id:"responses-1"},"Responses"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"200 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#check-results-schema"},"Check Results Schema"),"."),(0,l.kt)("h5",{id:"example-response-body-3"},"Example Response Body"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "results": [\n    {\n      "entityRef": "component:default/petstore",\n      "checkId": "tests-run",\n      "scope": "default",\n      "state": "failed",\n      "details": {\n        "notes": {\n          "type": "notes",\n          "version": 1,\n          "data": "Tests were not executed."\n        }\n      }\n    }\n  ]\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"400 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.5.1"},"Bad Request")),(0,l.kt)("p",null,"Invalid or missing query parameter(s)."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"500 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("p",null,"Soundcheck encountered an unexpected condition that prevented it from fulfilling the request."),(0,l.kt)("h5",{id:"example-response-body-4"},"Example Response Body"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "error": {\n    "name": "string",\n    "message": "string",\n    "stack": "string"\n  },\n  "request": {\n    "method": "string",\n    "url": "string"\n  },\n  "response": {\n    "statusCode": 0\n  }\n}\n')),(0,l.kt)("h2",{id:"facts-api"},"Facts API"),(0,l.kt)("p",null,"Use the Facts API to submit facts to Soundcheck."),(0,l.kt)("h3",{id:"submitting-facts"},"Submitting Facts"),(0,l.kt)("p",null,"Submit Facts to Soundcheck."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POST localhost:7007/api/soundcheck/facts")),(0,l.kt)("h4",{id:"request-body-1"},"Request Body"),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#facts-schema"},"Facts Schema"),"."),(0,l.kt)("h5",{id:"example-request-body-1"},"Example Request Body"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "facts": [\n    {\n      "factRef": "catalog:default/petstore_metadata",\n      "entityRef": "component:default/petstore",\n      "data": {\n        "example": "petstore data"\n      },\n      "timestamp": "2023-02-06T19:33:48.590+00:00"\n    }\n  ],\n  "cache": {\n    "duration": {\n      "hours": 24\n    }\n  }\n}\n')),(0,l.kt)("h5",{id:"example-requests-2"},"Example Requests"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'BACKSTAGE_BACKEND=localhost:7007 && \\\ncurl \\\n  -H \'Content-Type: application/json\' \\\n  "${BACKSTAGE_BACKEND}/api/soundcheck/facts" \\\n  --data @- << EOF\n{\n  "facts": [\n    {\n      "factRef": "catalog:default/petstore_metadata",\n      "entityRef": "component:default/petstore",\n      "data": {\n        "example": "petstore data"\n      },\n      "timestamp": "2023-02-06T19:33:48.590+00:00"\n    }\n  ],\n  "cache": {\n    "duration": {\n      "hours": 24\n    }\n  }\n}\nEOF\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http"},'POST /api/soundcheck/results HTTP/1.1\nHost: localhost:7007\nContent-Type: application/json\nContent-Length: 129\n\n{\n  "facts": [\n    {\n      "factRef": "catalog:default/petstore_metadata",\n      "entityRef": "component:default/petstore",\n      "data": {\n        "example": "petstore data"\n      },\n      "timestamp": "2023-02-06T19:33:48.590+00:00"\n    }\n  ],\n  "cache": {\n    "duration": {\n      "hours": 24\n    }\n  }\n}\n')),(0,l.kt)("h4",{id:"responses-2"},"Responses"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"200 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.rfc-editor.org/rfc/rfc7231#section-6.3.1"},"OK")),(0,l.kt)("p",null,"Returns the factsRefs which were submitted."),(0,l.kt)("h5",{id:"example-response-body-5"},"Example Response Body"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "factRefs": ["catalog:default/petstore_metadata"]\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"400 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.5.1"},"Bad Request")),(0,l.kt)("p",null,"Body did not match expected schema."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"#error-schema"},"Error Schema"),"."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"500 Response")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7231#section-6.6.1"},"Internal Server Error")),(0,l.kt)("p",null,"Soundcheck encountered an unexpected condition that prevented it from fulfilling the request.q"),(0,l.kt)("h2",{id:"track-api"},"Track API"),(0,l.kt)("p",null,"Use the Track API to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"List all tracks"),(0,l.kt)("li",{parentName:"ul"},"Get a track by ID")),(0,l.kt)("p",null,"Each API call is discussed in detail below."),(0,l.kt)("h3",{id:"get-a-list-of-tracks"},"Get a List of Tracks"),(0,l.kt)("p",null,"The endpoint to get a list of tracks is at ",(0,l.kt)("inlineCode",{parentName:"p"},"/api/soundcheck/tracks"),".\nFor a local deployment, the call would look like this:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GET localhost:7007/api/soundcheck/tracks")),(0,l.kt)("h4",{id:"query-parameters-1"},"Query Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tracks")," ",(0,l.kt)("em",{parentName:"li"},"Optional"),". Filters tracks to only those with the provided track ID(s). Accepts multiple values: ",(0,l.kt)("inlineCode",{parentName:"li"},"tracks=A,tracks=B"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"entityRef")," ",(0,l.kt)("em",{parentName:"li"},"Optional"),". A ",(0,l.kt)("a",{parentName:"li",href:"https://backstage.io/docs/features/software-catalog/references#string-references"},"reference")," to the entity to retrieve applicable tracks for. When this query param is provided,\nonly tracks (and checks) which are applicable to this entity are returned."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"onlyApplicableChecks")," ",(0,l.kt)("em",{parentName:"li"},"Optional"),". Used in conjunction with the ",(0,l.kt)("inlineCode",{parentName:"li"},"entityRef")," query params, determined whether all\nchecks in a track are included in the response or only checks which are applicable to the given entity.")),(0,l.kt)("p",null,"The response body has ",(0,l.kt)("inlineCode",{parentName:"p"},"tracks")," containing all tracks."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "tracks": [\n    ...\n  ]\n}\n')),(0,l.kt)("h3",{id:"get-a-track"},"Get a Track"),(0,l.kt)("p",null,"The endpoint to get a track is at ",(0,l.kt)("inlineCode",{parentName:"p"},"/api/soundcheck/track/:trackId"),". Where ",(0,l.kt)("inlineCode",{parentName:"p"},":trackId")," is the ID of the track you would\nlike to retrieve."),(0,l.kt)("p",null,"For a local deployment, the call would look like this:\n",(0,l.kt)("inlineCode",{parentName:"p"},"GET localhost:7007/api/soundcheck/track/:trackId")),(0,l.kt)("h4",{id:"query-parameters-2"},"Query Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"entityRef")," ",(0,l.kt)("em",{parentName:"li"},"Optional"),". A ",(0,l.kt)("a",{parentName:"li",href:"https://backstage.io/docs/features/software-catalog/references#string-references"},"reference")," to the entity to validate applicability for. When this query param is provided,\nthe requested track is only returned if it is applicable to the provided entity, otherwise ",(0,l.kt)("inlineCode",{parentName:"li"},"{}")," is returned."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"onlyApplicableChecks")," ",(0,l.kt)("em",{parentName:"li"},"Optional"),". Used in conjunction with the ",(0,l.kt)("inlineCode",{parentName:"li"},"entityRef")," query params, determined whether all\nchecks in the track are included in the response or only checks which are applicable to the given entity.")),(0,l.kt)("p",null,"The response body has ",(0,l.kt)("inlineCode",{parentName:"p"},"track")," containing the requested track."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "track": {\n    ...\n  }\n}\n')),(0,l.kt)("h2",{id:"schemas"},"Schemas"),(0,l.kt)("h4",{id:"check-results-schema"},"Check Results Schema"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"results")," An array of ",(0,l.kt)("a",{parentName:"li",href:"#check-result-schema"},"check results"),".")),(0,l.kt)("h4",{id:"check-result-schema"},"Check Result Schema"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"entityRef")," A ",(0,l.kt)("a",{parentName:"li",href:"https://backstage.io/docs/features/software-catalog/references#string-references"},"reference")," to the entity that the check result is for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"checkId")," The unique identifier of the check that the result is for."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"state")," The check results state. One of ",(0,l.kt)("inlineCode",{parentName:"li"},"passed")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"failed"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"scope")," ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The scope within which this check was performed. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"default"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"details")," ",(0,l.kt)("em",{parentName:"li"},"Optional"),". Additional details on the check result. Currently only supports ",(0,l.kt)("inlineCode",{parentName:"li"},"notes"),".",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"notes"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". Type of the check result details, currently only supports ",(0,l.kt)("inlineCode",{parentName:"li"},"notes"),". Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"notes"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"version"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". Version of the check result details, can be any number. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data"),": Markdown providing additional context on the check result (e.g., why it failed).")))))),(0,l.kt)("h4",{id:"facts-schema"},"Facts Schema"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"facts")," An array of ",(0,l.kt)("a",{parentName:"li",href:"#fact-schema"},"facts"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cache")," A ",(0,l.kt)("a",{parentName:"li",href:"#cache-config-schema"},"cache config"),".")),(0,l.kt)("h4",{id:"fact-schema"},"Fact Schema"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"factRef")," A unique ",(0,l.kt)("a",{parentName:"li",href:"https://backstage.io/docs/features/software-catalog/references#string-references"},"reference")," to the fact."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"entityRef")," A ",(0,l.kt)("a",{parentName:"li",href:"https://backstage.io/docs/features/software-catalog/references#string-references"},"reference")," to the entity this fact is collected against."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," The data collected of the fact's data schema."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timestamp")," The date/time at which this fact was collected."),(0,l.kt)("li",{parentName:"ul"})),(0,l.kt)("h4",{id:"cache-config-schema"},"Cache Config Schema"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A boolean",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"true")," - Indicates that the fact should be cached forever."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"false")," - Indicates that the fact should not be cached."))),(0,l.kt)("li",{parentName:"ul"},"Or an object containing a ",(0,l.kt)("inlineCode",{parentName:"li"},"duration")," field",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"duration")," Specifies the cache duration. An object with one or more of the following:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"years"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The number of years."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"months"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The number of months."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"weeks"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The number of weeks."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"days"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The number of days."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hours"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The number of hours."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"minutes"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The number of minutes;"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"seconds"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The number of seconds."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"milliseconds"),": ",(0,l.kt)("em",{parentName:"li"},"Optional"),". The number of milliseconds.")))))),(0,l.kt)("h4",{id:"error-schema"},"Error Schema"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"error"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," Name of the error."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"message")," Error message."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"stack")," Stack trace."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"request"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"method")," HTTP request method."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"url")," URL"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"response"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"statusCode")," ",(0,l.kt)("a",{parentName:"li",href:"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"},"HTTP status code"),".")))))))}d.isMDXComponent=!0}}]);