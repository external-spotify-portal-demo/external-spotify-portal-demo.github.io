"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[939],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(a),d=o,f=u["".concat(c,".").concat(d)]||u[d]||h[d]||r;return a?n.createElement(f,i(i({ref:t},p),{},{components:a})):n.createElement(f,i({ref:t},p))}));function f(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3857:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(7462),o=(a(7294),a(3905));const r={title:"Github",sidebar_position:2},i=void 0,l={unversionedId:"soundcheck/3p-integrations/github",id:"soundcheck/3p-integrations/github",title:"Github",description:"Github integration plugin for Soundcheck.",source:"@site/docs/soundcheck/3p-integrations/github.mdx",sourceDirName:"soundcheck/3p-integrations",slug:"/soundcheck/3p-integrations/github",permalink:"/soundcheck/3p-integrations/github",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/soundcheck/3p-integrations/github.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Github",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Source Control Management",permalink:"/soundcheck/3p-integrations/scm"},next:{title:"API Reference",permalink:"/soundcheck/api"}},c={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configure Github integration in Backstage",id:"configure-github-integration-in-backstage",level:3},{value:"Add the GitHubFactCollector to Soundcheck",id:"add-the-githubfactcollector-to-soundcheck",level:3},{value:"Plugin Configuration",id:"plugin-configuration",level:2},{value:"Defining Github Fact Collectors",id:"defining-github-fact-collectors",level:2},{value:"Overall Shape Of A Github Fact Collector",id:"overall-shape-of-a-github-fact-collector",level:3},{value:"<code>frequency</code> optional",id:"frequency-optional",level:4},{value:"<code>filter</code> optional",id:"filter-optional",level:4},{value:"<code>cache</code> optional",id:"cache-optional",level:4},{value:"<code>collects</code> required",id:"collects-required",level:4},{value:"Overall Shape Of A Fact Extractor",id:"overall-shape-of-a-fact-extractor",level:3},{value:"<code>factName</code> required",id:"factname-required",level:4},{value:"<code>type</code> required",id:"type-required",level:4},{value:"<code>frequency</code> optional",id:"frequency-optional-1",level:4},{value:"<code>branch</code> optional",id:"branch-optional",level:4},{value:"<code>filter</code> optional",id:"filter-optional-1",level:4},{value:"<code>cache</code> optional",id:"cache-optional-1",level:4},{value:"Collecting BranchProtections Fact",id:"collecting-branchprotections-fact",level:2},{value:"Shape of A BranchProtections Fact Collector",id:"shape-of-a-branchprotections-fact-collector",level:3},{value:"Shape of A BranchProtections Fact",id:"shape-of-a-branchprotections-fact",level:3},{value:"Shape of A BranchProtections Fact Check",id:"shape-of-a-branchprotections-fact-check",level:3},{value:"Collecting RepositoryDetails Fact",id:"collecting-repositorydetails-fact",level:2},{value:"Shape of A RepositoryDetails Fact Collector",id:"shape-of-a-repositorydetails-fact-collector",level:3},{value:"Shape of A RepositoryDetails Fact",id:"shape-of-a-repositorydetails-fact",level:3},{value:"Shape of A RepositoryDetails Fact Check",id:"shape-of-a-repositorydetails-fact-check",level:3}],p={toc:s},u="wrapper";function h(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Github integration plugin for ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.spotify.com/plugins/soundcheck/"},"Soundcheck"),".\nSimilarly to ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend-module-scm"},"SCM Integration plugin"),", it provides out-of-box integration with Github by leveraging Backstage's Github integration and implements extraction and collection of facts from Github repositories.\nThe purpose of Github Integration plugin is to provide Github-specific fact collection (like branch protections), while the SCM Integration plugin provides the collection of facts based on repository content."),(0,o.kt)("p",null,"Github integration plugin supports the extraction of the following facts:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#collecting-branchprotections-fact"},"BranchProtections")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#collecting-repositorydetails-fact"},"RepositoryDetails"))),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("h3",{id:"configure-github-integration-in-backstage"},"Configure Github integration in Backstage"),(0,o.kt)("p",null,"Integrations are configured at the root level of ",(0,o.kt)("inlineCode",{parentName:"p"},"app-config.yaml"),", here's an example configuration for Github:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"integrations:\n  github:\n    - host: github.com\n      token: ${GITHUB_TOKEN}\n")),(0,o.kt)("p",null,"Follow the ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.io/docs/integrations/github/locations"},"instructions")," for full details on configuration."),(0,o.kt)("h3",{id:"add-the-githubfactcollector-to-soundcheck"},"Add the GitHubFactCollector to Soundcheck"),(0,o.kt)("p",null,"When creating the soundcheck-backend, add the ",(0,o.kt)("inlineCode",{parentName:"p"},"GitHubFactCollector"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { SoundcheckBuilder } from '@spotify/backstage-plugin-soundcheck-backend';\nimport { Router } from 'express';\nimport { PluginEnvironment } from '../types';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  return SoundcheckBuilder.create({ ...env })\n    .addFactCollectors(\n      GithubFactCollector.create(env.config, env.logger, env.cache),\n    )\n    .build();\n}\n")),(0,o.kt)("p",null,"See the the soundcheck-backend ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend#fact-schema"},"documentation"),"\nfor additional details on creating the Soundcheck backend."),(0,o.kt)("h2",{id:"plugin-configuration"},"Plugin Configuration"),(0,o.kt)("p",null,"Collection of facts is driven by config. To learn more about the config, see the ",(0,o.kt)("a",{parentName:"p",href:"#defining-github-fact-collectors"},"Defining Github Fact Collectors"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create ",(0,o.kt)("inlineCode",{parentName:"p"},"github-facts-collectors.yaml")," in the root of your Backstage repository and fill in all your Github fact collectors.\nA simple example Github fact collector is listed below."),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Note:")," this file will be loaded at runtime along with the rest of your Backstage configuration files, so make sure it's available in deployed environments in the same way as your ",(0,o.kt)("inlineCode",{parentName:"p"},"app-config.yaml")," files."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nfrequency:\n  cron: '0 * * * *'\ncollects:\n  - factName: branch_protections\n    type: BranchProtections\n    branch: master\n  - factName: repo_details\n    type: RepositoryDetails\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a soundcheck collectors field to ",(0,o.kt)("inlineCode",{parentName:"p"},"app-config.yaml")," and reference the newly created ",(0,o.kt)("inlineCode",{parentName:"p"},"github-facts-collectors.yaml")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# app-config.yaml\nsoundcheck:\n  collectors:\n    github:\n      $include: ./github-facts-collectors.yaml\n")))),(0,o.kt)("h2",{id:"defining-github-fact-collectors"},"Defining Github Fact Collectors"),(0,o.kt)("p",null,"This section describes the data shape and semantics of Github Fact Collectors."),(0,o.kt)("h3",{id:"overall-shape-of-a-github-fact-collector"},"Overall Shape Of A Github Fact Collector"),(0,o.kt)("p",null,"The following is an example of a descriptor file for a Github Fact Collector:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nfrequency:\n  cron: '0 * * * *'\nfilter:\n  kind: 'Component'\ncache:\n  duration:\n    hours: 2\ncollects:\n  - factName: branch_protections\n    type: BranchProtections\n    branch: master\n    filter:\n      - spec.lifecycle: 'production'\n        spec.type: 'website'\n    cache: false\n  - factName: repo_details\n    type: RepositoryDetails\n    cache: true\n")),(0,o.kt)("p",null,"See below for details about these fields."),(0,o.kt)("h4",{id:"frequency-optional"},(0,o.kt)("inlineCode",{parentName:"h4"},"frequency")," ","[optional]"),(0,o.kt)("p",null,"The frequency at which the collector should be executed. Possible values are either a cron expression ",(0,o.kt)("inlineCode",{parentName:"p"},"{ cron: ... }")," or ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.io/docs/reference/backend-tasks.humanduration"},"HumanDuration"),".\nThis is the default frequency for each extractor."),(0,o.kt)("h4",{id:"filter-optional"},(0,o.kt)("inlineCode",{parentName:"h4"},"filter")," ","[optional]"),(0,o.kt)("p",null,"A filter specifying which entities to collect the specified facts for. Matches the ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.io/docs/reference/catalog-client.entityfilterquery"},"filter format")," used by the Catalog API.\nThis is the default filter for each extractor."),(0,o.kt)("h4",{id:"cache-optional"},(0,o.kt)("inlineCode",{parentName:"h4"},"cache")," ","[optional]"),(0,o.kt)("p",null,"If the collected facts should be cached, and if so for how long. Possible values are either ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," or a nested ",(0,o.kt)("inlineCode",{parentName:"p"},"{ duration:")," ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.io/docs/reference/types.humanduration"},"HumanDuration")," ",(0,o.kt)("inlineCode",{parentName:"p"},"}")," field.\nThis is the default cache config for each extractor."),(0,o.kt)("h4",{id:"collects-required"},(0,o.kt)("inlineCode",{parentName:"h4"},"collects")," ","[required]"),(0,o.kt)("p",null,"An array describing which facts to collect and how to extract them. See below for details about the overall shape of a fact extractor."),(0,o.kt)("h3",{id:"overall-shape-of-a-fact-extractor"},"Overall Shape Of A Fact Extractor"),(0,o.kt)("p",null,"Each extractor supports the fields described below."),(0,o.kt)("h4",{id:"factname-required"},(0,o.kt)("inlineCode",{parentName:"h4"},"factName")," ","[required]"),(0,o.kt)("p",null,"The name of the fact to be extracted."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Minimum length of 1"),(0,o.kt)("li",{parentName:"ul"},"Maximum length of 100"),(0,o.kt)("li",{parentName:"ul"},"Alphanumeric with single separator instances of periods, dashes, underscores, or forward slashes")),(0,o.kt)("h4",{id:"type-required"},(0,o.kt)("inlineCode",{parentName:"h4"},"type")," ","[required]"),(0,o.kt)("p",null,"The type of the extractor (e.g. BranchProtections, RepositoryDetails)."),(0,o.kt)("h4",{id:"frequency-optional-1"},(0,o.kt)("inlineCode",{parentName:"h4"},"frequency")," ","[optional]"),(0,o.kt)("p",null,"The frequency at which the fact extraction should be executed. Possible values are either a cron expression ",(0,o.kt)("inlineCode",{parentName:"p"},"{ cron: ... }")," or ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.io/docs/reference/backend-tasks.humanduration"},"HumanDuration"),".\nIf provided it overrides the default frequency provided at the top level. If not provided it defaults to the frequency provided at the top level. If neither extractor's frequency nor default frequency is provided the fact will only be collected on demand.\nExample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"frequency:\n  minutes: 10\n")),(0,o.kt)("h4",{id:"branch-optional"},(0,o.kt)("inlineCode",{parentName:"h4"},"branch")," ","[optional]"),(0,o.kt)("p",null,"The branch to extract the fact from. If not provided, defaults to the repository's default branch."),(0,o.kt)("h4",{id:"filter-optional-1"},(0,o.kt)("inlineCode",{parentName:"h4"},"filter")," ","[optional]"),(0,o.kt)("p",null,"A filter specifying which entities to collect the specified facts for. Matches the ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.io/docs/reference/catalog-client.entityfilterquery"},"filter format")," used by the Catalog API.\nIf provided it overrides the default filter provided at the top level. If not provided it defaults to the filter provided at the top level. If neither extractor's filter nor default filter is provided the fact will be collected for all entities."),(0,o.kt)("h4",{id:"cache-optional-1"},(0,o.kt)("inlineCode",{parentName:"h4"},"cache")," ","[optional]"),(0,o.kt)("p",null,"If the collected facts should be cached, and if so for how long. Possible values are either ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," or a nested ",(0,o.kt)("inlineCode",{parentName:"p"},"{ duration:")," ",(0,o.kt)("a",{parentName:"p",href:"https://backstage.io/docs/reference/types.humanduration"},"HumanDuration")," ",(0,o.kt)("inlineCode",{parentName:"p"},"}")," field.\nIf provided it overrides the default cache config provided at the top level. If not provided it defaults to the cache config provided at the top level. If neither extractor's cache nor default cache config is provided the fact will not be cached.\nExample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"cache:\n  duration:\n    hours: 24\n")),(0,o.kt)("h2",{id:"collecting-branchprotections-fact"},"Collecting BranchProtections Fact"),(0,o.kt)("p",null,"BranchProtections fact contains information about configured branch protections for a given branch in Github repository."),(0,o.kt)("h3",{id:"shape-of-a-branchprotections-fact-collector"},"Shape of A BranchProtections Fact Collector"),(0,o.kt)("p",null,"The shape of a BranchProtections Fact Collector matches the ",(0,o.kt)("a",{parentName:"p",href:"#overall-shape-of-a-github-fact-collector"},"Overall Shape Of A Github Fact Collector")," (restriction: ",(0,o.kt)("inlineCode",{parentName:"p"},"type: BranchProtections"),")."),(0,o.kt)("p",null,"The following is an example of the BranchProtections Fact Collector config:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"collects:\n  - factName: branch_protections\n    type: BranchProtections\n    frequency:\n      cron: '0 * * * *'\n    branch: master\n    filter:\n      - spec.lifecycle: 'production'\n        spec.type: 'website'\n    cache: false\n")),(0,o.kt)("h3",{id:"shape-of-a-branchprotections-fact"},"Shape of A BranchProtections Fact"),(0,o.kt)("p",null,"The shape of a BranchProtections Fact is based on the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend#fact-schema"},"Fact Schema"),"."),(0,o.kt)("p",null,"For a description of the data collected regarding branch protection, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/branches/branch-protection"},"Github API documentation"),"."),(0,o.kt)("p",null,"The following is an example of the collected BranchProtections Fact:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"factRef: github:master/branch_protections\nentityRef: component:default/queue-proxy\nscope: master\ntimestamp: 2023-02-24T15:50+00Z\ndata:\n  url: 'https://api.github.com/repos/backstage/backstage/branches/master/protection'\n  required_pull_request_reviews:\n    url: 'https://api.github.com/repos/backstage/backstage/branches/master/protection/required_pull_request_reviews',\n    dismiss_stale_reviews: false\n    require_code_owner_reviews: true\n    required_approving_review_count: 2\n    require_last_push_approval: false\n  required_signatures:\n    url: 'https://api.github.com/repos/backstage/backstage/branches/master/protection/required_signatures'\n    enabled: false\n  enforce_admins:\n    url: 'https://api.github.com/repos/backstage/backstage/branches/master/protection/enforce_admins'\n    enabled: false\n  required_linear_history:\n    enabled: false\n  allow_force_pushes:\n    enabled: true\n  allow_deletions:\n    enabled: true\n  block_creations:\n    enabled: true\n  required_conversation_resolution:\n    enabled: false\n  lock_branch:\n    enabled: false\n  allow_fork_syncing:\n    enabled: true\n")),(0,o.kt)("h3",{id:"shape-of-a-branchprotections-fact-check"},"Shape of A BranchProtections Fact Check"),(0,o.kt)("p",null,"The shape of a BranchProtections Fact Check matches the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend#shape-of-a-fact-check"},"Shape of a Fact Check"),"."),(0,o.kt)("p",null,"The following is an example of the BranchProtections fact checks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"soundcheck:\n  checks:\n    - id: requires_code_owner_reviews\n      rule:\n        factRef: github:master/branch_protections\n        path: $.required_pull_request_reviews.require_code_owner_reviews\n        operator: equal\n        value: true\n    - id: requires_at_least_two_approving_reviews\n      rule:\n        factRef: github:master/branch_protections\n        path: $.required_pull_request_reviews.required_approving_review_count\n        operator: greaterThanInclusive\n        value: 2\n")),(0,o.kt)("p",null,"The following is an example of the Soundcheck program that utilizes these checks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: demo\n  name: Demo\n  ownerEntityRef: group:default/owning_group\n  description: Demonstration of Soundcheck BranchProtections Fact Extractor\n  levels:\n    - ordinal: 1\n      name: First level\n      description: Checks leveraging Soundcheck's Github BranchProtections Fact Extractor\n      checks:\n        - id: requires_code_owner_reviews\n          name: Requires code owner reviews\n          description: PR requires code owner reviews\n        - id: requires_at_least_two_approving_reviews\n          name: Requires at least two approving reviews\n          description: PR requires at least two approving reviews\n")),(0,o.kt)("h2",{id:"collecting-repositorydetails-fact"},"Collecting RepositoryDetails Fact"),(0,o.kt)("p",null,"RepositoryDetails fact contains information about a Github repository."),(0,o.kt)("h3",{id:"shape-of-a-repositorydetails-fact-collector"},"Shape of A RepositoryDetails Fact Collector"),(0,o.kt)("p",null,"The shape of a RepositoryDetails Fact Collector matches the ",(0,o.kt)("a",{parentName:"p",href:"#overall-shape-of-a-github-fact-collector"},"Overall Shape Of A Github Fact Collector")," (restriction: ",(0,o.kt)("inlineCode",{parentName:"p"},"type: RepositoryDetails"),")."),(0,o.kt)("p",null,"The following is an example of the RepositoryDetails Fact Collector config:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"collects:\n  - factName: repo_details\n    type: RepositoryDetails\n    frequency:\n      cron: '0 * * * *'\n    filter:\n      - spec.lifecycle: 'production'\n    cache: true\n")),(0,o.kt)("h3",{id:"shape-of-a-repositorydetails-fact"},"Shape of A RepositoryDetails Fact"),(0,o.kt)("p",null,"The shape of a RepositoryDetails Fact is based on the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend#fact-schema"},"Fact Schema"),"."),(0,o.kt)("p",null,"For a description of the data collected about repository, refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/repos/repos#get-a-repository"},"Github API documentation"),"."),(0,o.kt)("p",null,"The following is an example of the collected RepositoryDetails Fact:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"factRef: github:default/repo_details\nentityRef: component:default/queue-proxy\nscope: default\ntimestamp: 2023-02-24T15:50+00Z\ndata:\n  name: backstage\n  full_name: backstage/backstage\n  private: true\n  html_url: 'https://github.com/backstage/backstage'\n  description: null\n  fork: false\n  url: 'https://api.github.com/repos/backstage/backstage'\n  homepage: null\n  size: 3\n  stargazers_count: 0\n  watchers_count: 0\n  language: null\n  has_issues: true\n  has_projects: true\n  has_downloads: true\n  has_wiki: true\n  has_pages: false\n  has_discussions: false\n  forks_count: 0\n  mirror_url: null\n  archived: false\n  disabled: false\n  open_issues_count: 0\n  license: null\n  allow_forking: true\n  is_template: false\n  web_commit_signoff_required: false\n  visibility: 'private'\n  forks: 0\n  open_issues: 0\n  watchers: 0\n  default_branch: master\n  permissions:\n    admin: true\n    maintain: true\n    push: true\n    triage: true\n    pull: true\n  allow_squash_merge: true\n  allow_merge_commit: true\n  allow_rebase_merge: true\n  allow_auto_merge: false\n  delete_branch_on_merge: false\n  allow_update_branch: false\n  use_squash_pr_title_as_default: false\n  squash_merge_commit_message: 'COMMIT_MESSAGES'\n  squash_merge_commit_title: 'COMMIT_OR_PR_TITLE'\n  merge_commit_message: 'PR_TITLE'\n  merge_commit_title: 'MERGE_MESSAGE'\n  security_and_analysis:\n    secret_scanning:\n      status: 'disabled'\n    secret_scanning_push_protection:\n      status: 'disabled'\n  network_count: 0\n  subscribers_count: 1\n")),(0,o.kt)("h3",{id:"shape-of-a-repositorydetails-fact-check"},"Shape of A RepositoryDetails Fact Check"),(0,o.kt)("p",null,"The shape of a RepositoryDetails Fact Check matches the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@spotify/backstage-plugin-soundcheck-backend#shape-of-a-fact-check"},"Shape of a Fact Check"),"."),(0,o.kt)("p",null,"The following is an example of the RepositoryDetails fact checks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"soundcheck:\n  checks:\n    - id: allows_rebase_merge\n      rule:\n        factRef: github:default/repo_details\n        path: $.allow_rebase_merge\n        operator: equal\n        value: true\n    - id: has_less_than_ten_open_issues\n      rule:\n        factRef: github:default/repo_details\n        path: $.open_issues\n        operator: lessThan\n        value: 10\n")),(0,o.kt)("p",null,"The following is an example of the Soundcheck program that utilizes these checks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"- id: demo\n  name: Demo\n  ownerEntityRef: group:default/owning_group\n  description: Demonstration of Soundcheck RepositoryDetails Fact Extractor\n  levels:\n    - ordinal: 1\n      name: First level\n      description: Checks leveraging Soundcheck's Github RepositoryDetails Fact Extractor\n      checks:\n        - id: allows_rebase_merge\n          name: Allows Rebase Merge\n          description: Repository allows rebase merge\n        - id: has_less_than_ten_open_issues\n          name: Has Less Than 10 Open Issues\n          description: Github Repository Has Less Than 10 Open Issues\n")))}h.isMDXComponent=!0}}]);